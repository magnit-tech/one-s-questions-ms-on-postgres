// Скачать драйвер нужной версии из https://www.postgresql.org/ftp/odbc/versions/msi/, например psqlodbc_15_00_0000.zip. 
// Добавить в "Администратор источника данных ODBC (32-разрядная версия)", закладка Пользовательский DNS, кнопка "Добавить" Выборать из списка PostgreSQL UNICODE
// Можно проверить работку, для этого выделить добавленную строку, нажать кнопку "Настройка" ввести данные по серверу, базе, пользователю и нажать кнопку test

// Загузка данных:
// Исходное количество 984 000, осталось 591 000, время 537 сек
// Исходное количество 984 000, осталось 591 000, время 354 сек - после переделки циклов в одну строку. Запись в РС РезультатыВыполненияЗапросов 52 сек
// Исходное количество 984 000, осталось 590 000, время 255 сек - после переделки циклов в одну строку. Запись в РС РезультатыВыполненияЗапросов 45 сек

// Загрузка данных. Исходное количество 984 000, осталось 590 000, время 194 сек - после переделки циклов в одну строку. Запись в РС 39 сек. Создание запросов 2 183 сек, Запись РС 59 сек.



// После заполнения нужно исключить ошибки "Задвоенная ВТ" - оставить нужную
// Максимально исключить ошибки "Отсутствует ВТ"
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьКомандыЗагрузки();
	ОбновитьДанныеСтатистики();
	
	ОбновитьОшибкиПреобразования();
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата	 = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтрокаПодключенияКБазеСобытий) Тогда
		Объект.СтрокаПодключенияКБазеСобытий = "DRIVER={SQL Server Native Client 11.0};SERVER=;DATABASE=;";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтрокаПодключенияКPostgres) Тогда
		Объект.СтрокаПодключенияКPostgres = "DRIVER={PostgreSQL Unicode};SERVER=;Port=5432;UID=;PWD=;DATABASE=;";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.ПорцияЗагрузкиДанных = Константы.ПорцияЗагрузкиДанных.Получить();
		Объект.ИнтервалОбработкиДанных = Константы.ИнтервалОбработкиДанных.Получить();
		
	КонецЕсли;
	
	ВидимостьПолейШапки();
	УстановитьОтбор();
	
	Элементы.ГруппаОсновная.Видимость = Истина;
	Элементы.ГруппаПараметры.Видимость = Ложь; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ВидимостьПолейШапки();
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	Настройки.Вставить("ОтборВТХранилище", Новый ХранилищеЗначения(СписокВременныеТаблицыPostgres.КомпоновщикНастроек.ПолучитьНастройки()));
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Массив = Новый Массив();
	Массив.Добавить("ПоказТекстаMSSQL");
	Массив.Добавить("ПоказТекстаPG");
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьШапка = Истина;	
	КонецЕсли;
	
	Для каждого ИмяКоманды Из Массив Цикл
		СкрытьПоказатьТекстЗапроса(ЭтаФорма, ИмяКоманды, Ложь);		
	КонецЦикла;
	ВидимостьПолейШапки();
	
	ОтборВТХранилище = Настройки.Получить("ОтборВТХранилище");
	Если ОтборВТХранилище <> Неопределено Тогда
		СписокВременныеТаблицыPostgres.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
		// Переопределим параметр на ссылку
		НастройкиКомпановкиДанных = ОтборВТХранилище.Получить();
		НастройкиКомпановкиДанных.ПараметрыДанных.Элементы[0].Значение = Объект.Ссылка;
		СписокВременныеТаблицыPostgres.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(НастройкиКомпановкиДанных);
		Элементы.СписокВременныеТаблицыPostgres.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Справочники.НастройкаТеста.ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Элементы.ГруппаПараметры.Видимость = Истина Тогда
		Элементы.ГруппаПараметры.Видимость = Ложь;
		Элементы.ГруппаОсновная.Видимость = Истина;
		Элементы.ФормаПоказатьПараметры.Пометка = Ложь;
        Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы 

&НаКлиенте
Процедура ПутьКФайлуВТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборФайлаВТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаССобытиямиMSSQLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборПапкиССобытиями();

КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиСобытийПриИзменении(Элемент)
	ВидимостьПолейШапки();
КонецПроцедуры

&НаКлиенте
Процедура СписокВременныеТаблицыPostgresОтборПриИзменении(Элемент)
	ИзменилсяОтборВТ = ИзменилсяОтборВТ + 1;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы 

&НаКлиенте
Процедура СписокВременныеТаблицыPostgresПриАктивизацииСтроки(Элемент)
	
	УстановитьПараметрыСпискаКолонок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура УдалитьДанные(Команда)
	
	УдалитьДанныеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеСОтбором(Команда)

	УдалитьДанныеСОтборомНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсе(Команда)
	
	ПередатьФайлыНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ПередатьФайлыНаСервер(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВременныеТаблицы(Команда)
	
	ПередатьФайлыНаСервер(3);

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьВременныеТаблицы(Команда)
	ПередатьФайлыНаСервер(5);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстыЗапросов(Команда)
	
	СозданиеЗапрсовНаКлиенте();   
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВременныеТаблицы(Команда)
	
	СозданиеВременныхТаблицНаКлиенте();   

КонецПроцедуры

&НаКлиенте
Процедура УстановкаСвязанныхЗапросов(Команда)
	
	УстановкаСвязанныхЗапросовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстыПоВыделеннымСтрокам(Команда)
	
	СозданиеЗапросовПоСтрокамНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстыПоОтбору(Команда)
	
	СозданиеЗапросовПоОтбору();	

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросы(Команда)
	
	ВыполнитьЗапросыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказТекстаЗапроса(Команда)
	
	СкрытьПоказатьТекстЗапроса(ЭтаФорма,Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Шапка(Команда)
	
	ПоказатьШапка = Не ПоказатьШапка;
	Элементы.ГруппаШапка.Видимость = ПоказатьШапка; 
	Элементы.Шапка.Пометка = ПоказатьШапка; 
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор(Команда)
	
	ПоказатьОтбор = Не ПоказатьОтбор;
	Элементы.РезультатыВыполненияЗапросовОтбор.Видимость = ПоказатьОтбор; 
	Элементы.Отбор.Пометка = ПоказатьОтбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВТ(Команда)
	
	ПоказатьОтборВТ = Не ПоказатьОтборВТ;
	Элементы.СписокВременныеТаблицыPostgresОтбор.Видимость = ПоказатьОтборВТ; 
	Элементы.ОтборВТ.Пометка = ПоказатьОтборВТ;
	
КонецПроцедуры

&НаКлиенте
Процедура НеСопостовлятьСеансыВТПриИзменении(Элемент)
	
	ВидимостьПолейШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПараметры(Команда)   
	
	Элементы.ФормаПоказатьПараметры.Пометка = Не Элементы.ФормаПоказатьПараметры.Пометка;
	Элементы.ГруппаОсновная.Видимость = НЕ Элементы.ФормаПоказатьПараметры.Пометка;
	Элементы.ГруппаПараметры.Видимость = Элементы.ФормаПоказатьПараметры.Пометка; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКолонкиВременнойТаблицы(Команда)
	
	Элементы.СписокВременныеТаблицыPostgresПоказатьКолонкиВременнойТаблицы.Пометка = Не Элементы.СписокВременныеТаблицыPostgresПоказатьКолонкиВременнойТаблицы.Пометка;
	Элементы.СписокПоляВременныхТаблицыPostgres.Видимость = Элементы.СписокВременныеТаблицыPostgresПоказатьКолонкиВременнойТаблицы.Пометка;
	
	УстановитьПараметрыСпискаКолонок();

КонецПроцедуры

&НаКлиенте
Процедура УбратьОшибкуПреобразования(Команда)
	
	УбратьОшибкуПреобразованияНаКлиенте();
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьОтбор(Команда)
	СохранитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтбор(Команда)
	ЗагрузитьОтборНаСервере(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтбора(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОкончаниеРедактированияСпискаОтборов", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.СохраненыеОтборыНастройкиТеста.ФормаСписка",,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаСВТ(Команда)
	
	НастройкаТестовКлиент.СкопироватьВБуферТекстЗапроса(Объект.Ссылка, Элементы.РезультатыВыполненияЗапросов.ТекущиеДанные);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИсправленныеСозданияВременныхТаблиц(Команда)
	
	ЗагрузитьИсправленныеСозданияВТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросыПоВыделеннымСтрокам(Команда)
	
	ВыполнитьЗапросыПоСтрокамНаКлиенте();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
// Вариант 1 - оба регистра, 2 - РезультатыВыполненияЗапросов, 3 - ВременныеТаблицы 
Процедура УдалитьДанныеНаСервере(Вариант = 1)
	
	НастройкаТестовСервер.УдалитьДанныеРегистровНастройкиТеста(Объект.Ссылка, Вариант);
	
	Элементы.РезультатыВыполненияЗапросов.Обновить();
	ОбновитьДанныеСтатистики();	
	
КонецПроцедуры

&НаКлиенте
// Вариант 1 - оба регистра, 2 - РезультатыВыполненияЗапросов, 3 - ВременныеТаблицы, 4 - Очистка РС отвечающие за временные таблицы Postgres, 5 - ВременныеТаблицы (то же что и 3, но без предварительной очистки РС ВременныеТаблицы 
Асинх Процедура ПередатьФайлыНаСервер(Вариант = 1) 
	
	Файлы = Новый Массив;
	Если Вариант = 1 Или Вариант = 3  Или Вариант = 5 Тогда
		Файлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.ПутьКФайлуВТ)); 
	КонецЕсли;
	ОчиститьЭтап = Ложь;
	//Логи = НайтиФайлы(Объект.ПапкаССобытиямиMSSQL, "*.xml");
	Если Вариант = 1 Или Вариант = 2 Тогда
		
		ЭтапЗагрузка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.ЗагрузкаДанных"));
		
		Если ЭтапЗагрузка.Завершен Тогда
			
			Ответ = Ждать ВопросАсинх("Этап Загрузки уже завершен. Хотите выполнить его заново?", РежимДиалогаВопрос.ДаНет, 60);
			Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Таймаут Тогда
				Возврат;	
			КонецЕсли; 
			
			ОчиститьЭтап = Истина;
			
		ИначеЕсли ЭтапЗагрузка.ТекущееID = 0 Или Объект.ПорцияЗагрузкиДанных = 0 Тогда	
			ОчиститьЭтап = Истина;
		Иначе
			ОчиститьЭтап = Ложь;
		КонецЕсли;
		
		Если Объект.РежимЗагрузкиСобытий = 0 Тогда
			Обещание = НайтиФайлыАсинх(Объект.ПапкаССобытиямиMSSQL, "*.xml"); 
			Логи = Ждать Обещание; 
			Если ЗначениеЗаполнено(Логи) Тогда
				
				Для каждого Лог Из Логи Цикл
					Файлы.Добавить(Новый ОписаниеПередаваемогоФайла(Лог.ПолноеИмя));  
				КонецЦикла;
				
			Иначе
				
				Сообщить(СтрШаблон("Не найдено файлов логов ""*.xml"" в ""%1""", Объект.ПапкаССобытиямиMSSQL));
				Возврат
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Обещание = ПоместитьФайлыНаСерверАсинх(,,Файлы, УникальныйИдентификатор);
	Результат = Ждать Обещание;
	
	Если Результат = Неопределено Тогда
		Сообщить("Не удалось передать файлы на сервер");
	Иначе
	
		ДанныеФайлов = Новый Массив();
			
		Для каждого Описание Из Результат Цикл
			Если Описание.ПомещениеФайлаОтменено Тогда
				ВызватьИсключение СтрШаблон("Не удалось поместить файл ""%1"" на сервер", Описание.СсылкаНаФайл.Файл.ПолноеИмя);	
			КонецЕсли;
			ДанныеФайлов.Добавить(Новый Структура("Адрес,Имя,Расширение", Описание.Адрес, Описание.СсылкаНаФайл.Имя, Описание.СсылкаНаФайл.Расширение));
		КонецЦикла;
		
		ЗагрузитьДанныеФон(Вариант, ДанныеФайлов, ОчиститьЭтап);	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеФон(Вариант, ДанныеФайлов, ОчиститьЭтап)
	
	ДлительнаяОперация = НачатьЗагрузкуДанныхНаСервере(Вариант, ДанныеФайлов, ОчиститьЭтап);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап", ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.ЗагрузкаДанных"));
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьЗагрузкуДанныхНаСервере(Вариант, ДанныеФайлов, ОчиститьЭтап)
	
	Для каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		ДанныеФайла.Вставить("ПутьНаСервере", ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение));
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.Адрес);
		ДанныеФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		
	КонецЦикла;
	
	НаименованиеЗадания = СтрШаблон("Загрузка данных в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	ПараметрыМетода.Вставить("ДанныеФайлов",ДанныеФайлов);
	ПараметрыМетода.Вставить("ОчиститьЭтап",ОчиститьЭтап);
	ПараметрыМетода.Вставить("Вариант",Вариант);
	
	ПараметрыТеста = Новый Структура("СтрокаПодключенияКБазеСобытий,РежимЗагрузкиСобытий,НеЗагружатьПропущенныеЗапросы,НеЗагружатьНенужныеЗапросы,ПорцияЗагрузкиДанных,ИнтервалОбработкиДанных,ПользовательБазыСобытий,ПарольБазыСобытий,ДобавитьЧасыКДатеПриЗагрузке");
	ЗаполнитьЗначенияСвойств(ПараметрыТеста, Объект);
	ПараметрыМетода.Вставить("ПараметрыТеста",ПараметрыТеста);
						
	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_Загрузка.ЗагрузитьДанныеФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	
	
КонецФункции

&НаКлиенте
Асинх Процедура ВыборФайлаВТ()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Файл csv (*.csv)|*.csv|Все файлы (*.*)|*.*";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ЗначениеЗаполнено(Объект.ПутьКФайлуВТ) Тогда
		
		Файл = Новый Файл(Объект.ПутьКФайлуВТ);
		Обещание = Файл.СуществуетАсинх();
	    Результат = Ждать Обещание;
		
		Если Результат Тогда
			ДиалогВыбораФайла.ПолноеИмяФайла = Файл.ПолноеИмя;	
			ДиалогВыбораФайла.Каталог = Файл.Путь;
		КонецЕсли; 
		
	КонецЕсли;
	
 	Обещание = ДиалогВыбораФайла.ВыбратьАсинх();
    Результат = Ждать Обещание;
	Если Результат <> Неопределено Тогда
		Объект.ПутьКФайлуВТ = Результат[0];	
	КонецЕсли;
	  		
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыборПапкиССобытиями()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	Файл = Новый Файл(Объект.ПапкаССобытиямиMSSQL);
	Обещание = Файл.СуществуетАсинх();
    Результат = Ждать Обещание;
	
	Если Результат Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = Файл.ПолноеИмя;	
		ДиалогВыбораФайла.Каталог = Файл.ПолноеИмя;
	КонецЕсли;
	
 	Обещание = ДиалогВыбораФайла.ВыбратьАсинх();
    Результат = Ждать Обещание;
	Если Результат <> Неопределено Тогда
		Объект.ПапкаССобытиямиMSSQL = Результат[0];	
	КонецЕсли;
	  		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПоказатьТекстЗапроса(Форма, ИмяКоманды,МенятьЗначение = Истина)   
	
	Если МенятьЗначение Тогда
		Форма[ИмяКоманды] = НЕ Форма[ИмяКоманды];
	КонецЕсли;
	Форма.Элементы[ИмяКоманды].Пометка = Форма[ИмяКоманды];
	Форма.Элементы[СтрШаблон("Текст%1", СтрЗаменить(ИмяКоманды, "ПоказТекста", ""))].Видимость = Форма[ИмяКоманды];
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СозданиеВременныхТаблицНаКлиенте()
	
	ЭтапЗагрузка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.ЗагрузкаДанных"));
	Если ЭтапЗагрузка.Завершен <> Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не завершен этап ""Загрузка данных""!");
		Возврат;
	КонецЕсли;
	
	ЭтапОбработка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.СозданиеВременныхТаблиц"));
	
	Если ЭтапОбработка.Завершен Тогда
		
		Ответ = Ждать ВопросАсинх("Этап Создание временных таблиц уже завершен. Хотите выполнить его заново?", РежимДиалогаВопрос.ДаНет, 60);
		Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Возврат;	
		КонецЕсли; 
		
		ОчиститьЭтап = Истина; 
		
	Иначе
		ОчиститьЭтап = Ложь;
	КонецЕсли;
	
	СозданиеВременныхТаблицФон(ОчиститьЭтап);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеВременныхТаблицФон(ОчиститьЭтап)
	
	ДлительнаяОперация = НачатьСозданиеВременныхТаблицНаСервере(ОчиститьЭтап);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап", ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.СозданиеВременныхТаблиц"));
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьСозданиеВременныхТаблицНаСервере(ОчиститьЭтап)
	
	НаименованиеЗадания = СтрШаблон("Создание временных табилиц в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	ПараметрыМетода.Вставить("ОчиститьЭтап",ОчиститьЭтап);

	ПараметрыТеста = Новый Структура("ИнтервалОбработкиДанных");
	ЗаполнитьЗначенияСвойств(ПараметрыТеста, Объект);
	ПараметрыМетода.Вставить("ПараметрыТеста",ПараметрыТеста);
						
	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_СозданиеВременныхТаблиц.СозданиеВременныхТаблицФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	

КонецФункции

&НаКлиенте
Асинх Процедура УстановкаСвязанныхЗапросовНаКлиенте()
	
	ЭтапЗагрузка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.СозданиеВременныхТаблиц"));
	Если ЭтапЗагрузка.Завершен <> Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не завершен этап ""Создание временных таблиц""!");
		Возврат;
	КонецЕсли;
	
	ЭтапОбработка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.УстановкаСвязанныхЗапросов"));
	
	Если ЭтапОбработка.Завершен Тогда
		
		Ответ = Ждать ВопросАсинх("Этап Установки связанных запросов уже завершен. Хотите выполнить его заново?", РежимДиалогаВопрос.ДаНет, 60);
		Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Возврат;	
		КонецЕсли; 
		
		ОчиститьЭтап = Истина; 
		
	Иначе
		ОчиститьЭтап = Ложь;
	КонецЕсли;
	
	УстановкаСвязанныхЗапросовФон(ОчиститьЭтап);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаСвязанныхЗапросовФон(ОчиститьЭтап)
	
	ДлительнаяОперация = НачатьУстановкаСвязанныхЗапросовНаСервере(ОчиститьЭтап);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап", ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.УстановкаСвязанныхЗапросов"));
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьУстановкаСвязанныхЗапросовНаСервере(ОчиститьЭтап)
	
	НаименованиеЗадания = СтрШаблон("Установка связанных запросов в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	ПараметрыМетода.Вставить("ОчиститьЭтап",ОчиститьЭтап);

	ПараметрыТеста = Новый Структура("ИнтервалОбработкиДанных");
	ЗаполнитьЗначенияСвойств(ПараметрыТеста, Объект);
	ПараметрыМетода.Вставить("ПараметрыТеста",ПараметрыТеста);
						
	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_УстановкаСвязанныхЗапросов.УстановкаСвязанныхЗапросовФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	

КонецФункции

&НаКлиенте
Асинх Процедура СозданиеЗапрсовНаКлиенте()
	
	ЭтапЗагрузка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.УстановкаСвязанныхЗапросов"));
	Если ЭтапЗагрузка.Завершен <> Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не завершен этап ""Создание временных таблиц""!");
		Возврат;
	КонецЕсли;
	
	ЭтапОбработка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.СозданиеТекстовЗапросов"));
	
	Если ЭтапОбработка.Завершен Тогда
		
		Ответ = Ждать ВопросАсинх("Этап Создание текстов запросов уже завершен. Хотите выполнить его заново?", РежимДиалогаВопрос.ДаНет, 60);
		Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Возврат;	
		КонецЕсли; 
		
		ОчиститьЭтап = Истина; 
		
	Иначе
		ОчиститьЭтап = Ложь;
	КонецЕсли;
	
	СозданиеЗапросовФон(ОчиститьЭтап);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЗапросовФон(ОчиститьЭтап)
	
	ДлительнаяОперация = НачатьСозданиеТекстовЗапросовНаСервере(ОчиститьЭтап);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап", ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.СозданиеТекстовЗапросов"));
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьСозданиеТекстовЗапросовНаСервере(ОчиститьЭтап)
	
	НаименованиеЗадания = СтрШаблон("Создание текстов запросов данных в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	ПараметрыМетода.Вставить("ОчиститьЭтап",ОчиститьЭтап);

	ПараметрыТеста = Новый Структура("ИнтервалОбработкиДанных");
	ЗаполнитьЗначенияСвойств(ПараметрыТеста, Объект);
	ПараметрыМетода.Вставить("ПараметрыТеста",ПараметрыТеста);
						
	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания); 
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_СозданиеЗапросов.СозданиеЗапросовФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	

КонецФункции

&НаКлиенте
Процедура СозданиеЗапросовПоСтрокамНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Элементы.РезультатыВыполненияЗапросов.ВыделенныеСтроки) Тогда
		Возврат	
	КонецЕсли; 
	
	ДлительнаяОперация = НачатьСозданиеТекстовЗапросовПоСтрокамНаСервере();
	ДополнительныеПараметры = Новый Структура;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
			
КонецПроцедуры

&НаСервере
Функция НачатьСозданиеТекстовЗапросовПоСтрокамНаСервере()
	
	НаименованиеЗадания = СтрШаблон("Создание текстов запросов по выделенным строкам в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	ПараметрыМетода.Вставить("ВыделенныеСтроки",Элементы.РезультатыВыполненияЗапросов.ВыделенныеСтроки);

	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_СозданиеЗапросов.СозданиеЗапросовПоОтборамФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	

КонецФункции

&НаКлиенте
Процедура СозданиеЗапросовПоОтбору()
	
	ЕстьОтбор = Ложь;
	Для каждого ЭлементОтбора Из РезультатыВыполненияЗапросов.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтбор = Истина;
		КонецЕсли;	
	КонецЦикла;
	Если НЕ ЕстьОтбор Тогда
		Возврат	
	КонецЕсли; 
	
	ДлительнаяОперация = НачатьСозданиеТекстовЗапросовПоОтборуНаСервере();
	ДополнительныеПараметры = Новый Структура;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
			
КонецПроцедуры

&НаСервере
Функция НачатьСозданиеТекстовЗапросовПоОтборуНаСервере()
	
	НаименованиеЗадания = СтрШаблон("Создание текстов запросов по выставленному отбору в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	Настройки = РезультатыВыполненияЗапросов.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыМетода.Вставить("Настройки",Настройки);

	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_СозданиеЗапросов.СозданиеЗапросовПоОтборамФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	

КонецФункции

&НаКлиенте
Асинх Процедура ВыполнитьЗапросыНаКлиенте()
	
	ЭтапЗагрузка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.СозданиеТекстовЗапросов"));
	Если ЭтапЗагрузка.Завершен <> Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не завершен этап ""Создание текстов запросов""!");
		Возврат;
	КонецЕсли;
	
	ЭтапОбработка = НастройкаТестовВызовСервера.ЭтапОбработки(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.ВыполнениеЗапросов"));
	
	Если ЭтапОбработка.Завершен Тогда
		
		Ответ = Ждать ВопросАсинх("Этап Выполнение запросов уже завершен. Хотите выполнить его заново?", РежимДиалогаВопрос.ДаНет, 60);
		Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Возврат;	
		КонецЕсли; 
		
		ОчиститьЭтап = Истина; 
		
	Иначе
		ОчиститьЭтап = Ложь;
	КонецЕсли;
	
	ВыполнениеЗапросовФон(ОчиститьЭтап);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗапросовФон(ОчиститьЭтап)
	
	ДлительнаяОперация = НачатьВыполнениеЗапросовНаСервере(ОчиститьЭтап);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап", ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.ВыполнениеЗапросов"));
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеЗапросовНаСервере(ОчиститьЭтап)
	
	НаименованиеЗадания = СтрШаблон("Выполнение запросов в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	ПараметрыМетода.Вставить("ОчиститьЭтап",ОчиститьЭтап);

	ПараметрыТеста = Новый Структура("СтрокаПодключенияКPostgres,ИнтервалОбработкиДанных,КоэффициентОжиданияВыполненияЗапросовНаPostgres,МинимальнаяДлительностьВыполненияЗапроса");
	ЗаполнитьЗначенияСвойств(ПараметрыТеста, Объект);
	ПараметрыМетода.Вставить("ПараметрыТеста",ПараметрыТеста);
						
	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_ВыполнениеЗапросов.ВыполнениеЗапросовФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	

КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросыПоСтрокамНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Элементы.РезультатыВыполненияЗапросов.ВыделенныеСтроки) Тогда
		Возврат	
	КонецЕсли; 
	
	ДлительнаяОперация = НачатьВыполнениеТекстовЗапросовПоСтрокамНаСервере();
	ДополнительныеПараметры = Новый Структура;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыполненияЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
			
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеТекстовЗапросовПоСтрокамНаСервере()
	
	НаименованиеЗадания = СтрШаблон("Выполнение запросов по строкам в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	ПараметрыМетода.Вставить("ВыделенныеСтроки",Элементы.РезультатыВыполненияЗапросов.ВыделенныеСтроки);
	
	ПараметрыТеста = Новый Структура("СтрокаПодключенияКPostgres,КоэффициентОжиданияВыполненияЗапросовНаPostgres,МинимальнаяДлительностьВыполненияЗапроса");
	ЗаполнитьЗначенияСвойств(ПараметрыТеста, Объект);
	ПараметрыМетода.Вставить("ПараметрыТеста",ПараметрыТеста);
	
	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестов_ВыполнениеЗапросов.ВыполнениеЗапросовПоСтрокамФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	

КонецФункции

// Управляет видимостью полей формы
&НаСервере
Процедура ВидимостьПолейШапки()
	
	Если Объект.РежимЗагрузкиСобытий = 0 Тогда
		Элементы.ГруппаЗагрузкаИзБазы.Видимость = Ложь;
		Элементы.ГруппаЗагрузкаИзПапки.Видимость = Истина;
	Иначе	
		Элементы.ГруппаЗагрузкаИзБазы.Видимость = Истина;
		Элементы.ГруппаЗагрузкаИзПапки.Видимость = Ложь;
	КонецЕсли;
	Элементы.РезультатыВыполненияЗапросовЗагрузитьДанные.Видимость = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.РезультатыВыполненияЗапросовСоздатьТекстыЗапросов.Видимость = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.РезультатыВыполненияЗапросовВыполнитьЗапросы.Видимость = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.РезультатыВыполненияЗапросовУдалитьДанные.Видимость = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.Удалить.Доступность = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.РезультатыВыполненияЗапросов.Доступность = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.РезультатыВыполненияЗапросовОтбор.Доступность = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.РезультатыВыполненияЗапросовОтбор.Видимость = ПоказатьОтбор; 
	Элементы.ГруппаШапка.Видимость = ПоказатьШапка; 
	Элементы.СписокВременныеТаблицыPostgresОтбор.Доступность = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.СписокВременныеТаблицыPostgresОтбор.Видимость = ПоказатьОтборВТ; 
	Элементы.СписокПоляВременныхТаблицыPostgres.Доступность = ЗначениеЗаполнено(Объект.Ссылка);	
	Элементы.СписокВременныеТаблицыPostgres.Доступность = ЗначениеЗаполнено(Объект.Ссылка);	
	
	Элементы.Шапка.Пометка = ПоказатьШапка;
	Элементы.Отбор.Пометка = ПоказатьОтбор;
	Элементы.ОтборВТ.Пометка = ПоказатьОтборВТ;
	
КонецПроцедуры

// Выводит сообщение о длительности текущей операции
&НаСервере
Процедура СообщитьДлительностьОперации(Описание, ДатаНачала, ИмяРеквизита = Неопределено, ПараметрыЗаписиЭтапа = Неопределено)
	
	ДатаОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = Окр((ДатаОкончания - ДатаНачала) / 1000, 0);

	Если ПараметрыЗаписиЭтапа <> Неопределено Тогда
		
		СтрокаТЧ = НастройкаТестовКлиентСервер.ЭтапОбработки(Объект, ПараметрыЗаписиЭтапа.ЭтапОбработки);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПараметрыЗаписиЭтапа);
		СтрокаТЧ.Длительность = СтрокаТЧ.Длительность + Длительность;
		СтрокаТЧ.НомерИтерации = СтрокаТЧ.НомерИтерации + 1;
		Длительность = СтрокаТЧ.Длительность;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Объект[ИмяРеквизита] = Длительность;
		ЭтотОбъект.Записать();
	КонецЕсли; 
	
	Сообщить(СтрШаблон("%1 составила %2 сек.", Описание, Длительность));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	//Для каждого ЭлементОтбора Из РезультатыВыполненияЗапросов.Параметры.Элементы Цикл
	//	Если ЭлементОтбора.Параметр = Новый ПараметрКомпоновкиДанных("НастройкаТеста") Тогда
	//		ЭлементОтбора.Значение = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Справочники.НастройкаТеста.ПустаяСсылка());	  
	//		Прервать;
	//	КонецЕсли;	
	//КонецЦикла;
	НастройкаТеста = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Справочники.НастройкаТеста.ПустаяСсылка());
	РезультатыВыполненияЗапросов.Параметры.УстановитьЗначениеПараметра("НастройкаТеста", НастройкаТеста);
	Элементы.РезультатыВыполненияЗапросов.Обновить();
	
	СписокВременныеТаблицыPostgres.Параметры.УстановитьЗначениеПараметра("НастройкаТеста", НастройкаТеста);
	СписокПоляВременныхТаблицыPostgres.Параметры.УстановитьЗначениеПараметра("НастройкаТеста", НастройкаТеста);
	ЭтапыОбработкиДанных.Параметры.УстановитьЗначениеПараметра("НастройкаТеста", НастройкаТеста);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьДанныеНаКлиенте()
	
	Ответ = Ждать ВопросАсинх(СтрШаблон("Удаление данных необратимо.%1Продолжить?", символы.ПС), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Таймаут Тогда
		Возврат;	
	КонецЕсли; 
	
	УдалитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьДанныеСОтборомНаКлиенте() 
	
	Ответ = Ждать ВопросАсинх(СтрШаблон("Удаление данных необратимо.%1Продолжить?", символы.ПС), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Таймаут Тогда
		Возврат;	
	КонецЕсли; 
	
	ДлительнаяОперация = НачатьУдалениеДанныхСОтборомНаСервере();
	ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("Этап", ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.ВыполнениеЗапросов"));
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеУдалениеДанныхСОтбором", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ПараметрыОжидания();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Удаляет данные из РС УстановитьОшибкуПреобразования по отбору из Отбора компоновщика на форме
&НаСервере
Функция НачатьУдалениеДанныхСОтборомНаСервере()
	
	НаименованиеЗадания = СтрШаблон("Удаление данных с отбором в %1", Объект);
	
	ПараметрыМетода=Новый Структура;
	ПараметрыМетода.Вставить("НастройкаТеста",Объект.Ссылка);
	Настройки = РезультатыВыполненияЗапросов.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыМетода.Вставить("Настройки",Настройки);

	ПараметрыВыполнения = ПараметрыВыполнения(НаименованиеЗадания);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"НастройкаТестовСервер.УдалениеДанныхСОтборомФон",
		ПараметрыМетода,
		АдресХранилища
		);		
		
	Возврат ДлительнаяОперация;	
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыСпискаКолонок()

	Если Элементы.СписокПоляВременныхТаблицыPostgres.Видимость Тогда
		
		ТекущиеДанные = Элементы.СписокВременныеТаблицыPostgres.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
		
			СписокПоляВременныхТаблицыPostgres.Параметры.УстановитьЗначениеПараметра("НомерСессии", ТекущиеДанные.НомерСессии);
			СписокПоляВременныхТаблицыPostgres.Параметры.УстановитьЗначениеПараметра("ИмяТаблицы", ТекущиеДанные.ИмяТаблицы);
			СписокПоляВременныхТаблицыPostgres.Параметры.УстановитьЗначениеПараметра("ДатаСоздания", ТекущиеДанные.ДатаСоздания);
			СписокПоляВременныхТаблицыPostgres.Параметры.УстановитьЗначениеПараметра("НомерСобытия", ТекущиеДанные.НомерСобытия);
			Элементы.СписокПоляВременныхТаблицыPostgres.Обновить();
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УбратьОшибкуПреобразованияНаКлиенте()
	
	ТекущиеДанные = Элементы.РезультатыВыполненияЗапросов.ТекущиеДанные; 
	Если ТекущиеДанные.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокЗапросов.ОшибкаПреобразования") Тогда
		
		СохранятьИсправленныеВТ = Ложь;	
		Если Объект.СохранятьИсправленныеВТ = 0 Тогда
			
			ТекстВопроса = "Сохранить результат исправления для возможности последующей загрузки в другую настройку теста 
				|или в текущую настройку при следующей операции ""Создания временных таблиц""?";
			КодыВозврата = Новый СписокЗначений;
			КодыВозврата.Добавить("СохранитьИНеЗадавать","Сохранить без вопросов");
			КодыВозврата.Добавить("Сохранить","Сохранить");
			КодыВозврата.Добавить("НеСохранитьИНеЗадавать","Не сохранить без вопросов");
			КодыВозврата.Добавить("НеСохранить","Не сохранить");
			КодыВозврата.Добавить(КодВозвратаДиалога.Прервать);
			
			Ответ = Ждать ВопросАсинх(ТекстВопроса, КодыВозврата, 60, КодВозвратаДиалога.Прервать);
			Если Ответ = КодВозвратаДиалога.Прервать Или Ответ = КодВозвратаДиалога.Таймаут Тогда
				Возврат;	
			КонецЕсли; 
			
			Если Ответ = "СохранитьИНеЗадавать" Или Ответ = "НеСохранитьИНеЗадавать" Тогда
				Объект.СохранятьИсправленныеВТ = ?(Ответ = "СохранитьИНеЗадавать", 1, 2);
				ЭтотОбъект.Записать();
			ИначеЕсли Ответ = "Сохранить" Тогда
				СохранятьИсправленныеВТ = Истина;	
			КонецЕсли;
			
		КонецЕсли;
			
		УбратьОшибкуИзСтрокиНаСервере(СохранятьИсправленныеВТ);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УбратьОшибкуИзСтрокиНаСервере(СохранятьИсправленныеВТ)
	
	ТекущаяСтрока = Элементы.РезультатыВыполненияЗапросов.ТекущаяСтрока;
	МенеджерРегистра = РегистрыСведений.РезультатыВыполненияЗапросов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерРегистра, ТекущаяСтрока);
	МенеджерРегистра.Прочитать(); 
	
	Если ЗначениеЗаполнено(МенеджерРегистра.ОшибкаПреобразования) Тогда
		
		РеквизитыОшибки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МенеджерРегистра.ОшибкаПреобразования, "ОтсутствуетВТ,ЗадвоенныеВТ");
		ЭтоОшибкаСозданияВТ = РеквизитыОшибки.ОтсутствуетВТ Или РеквизитыОшибки.ЗадвоенныеВТ;
		Если ЭтоОшибкаСозданияВТ Тогда
			
			РегВыражение = "(?<!--)(CREATE TEMPORARY TABLE pg_temp.(tt\d+).+)";
			
			РезультатПоиска = СтрНайтиПоРегулярномуВыражению(МенеджерРегистра.ТекстЗапросаPostgres, РегВыражение);
			Если РезультатПоиска.Длина = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю("Не найдена незакоментированная строка начинающаяся с CREATE TEMPORARY TABLE");
				Возврат
			КонецЕсли;
			
			Результат = РезультатПоиска.ПолучитьГруппы()[0].Значение; 
			ИмяТаблицы = РезультатПоиска.ПолучитьГруппы()[1].Значение;
			
			Если Не ОкончаниеИсправленияСозданияВТ(МенеджерРегистра, ИмяТаблицы, Результат, РеквизитыОшибки, СохранятьИсправленныеВТ) Тогда
				Возврат;	
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		МенеджерРегистра.ВидОшибки = Неопределено;
		МенеджерРегистра.ОшибкаПреобразования = Неопределено;
		МенеджерРегистра.Записать();
		
	КонецЕсли;
	
	Элементы.РезультатыВыполненияЗапросов.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ОкончаниеИсправленияСозданияВТ(МенеджерРегистра, ИмяТаблицы, Знач Результат, РеквизитыОшибки, СохранятьИсправленныеВТ = Неопределено)
			
	Рез = НастройкаТестов_СозданиеВременныхТаблиц.ЗаполнитьПоляВременнойТаблицы(Объект.Ссылка, МенеджерРегистра, ИмяТаблицы, Результат, ,Истина, СохранятьИсправленныеВТ); 
	Если Не Рез Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Ошибка разбора скрипта создания ВТ %1 в событии %2", ИмяТаблицы, МенеджерРегистра.НомерСобытия));
		Возврат Ложь;
	КонецЕсли;
	
	// Убираем ошибку
	НастройкаТестов_СозданиеЗапросов.УстановитьОшибкуПреобразования(ОшибкиПреобразования, МенеджерРегистра, ,?(РеквизитыОшибки.ОтсутствуетВТ, "ОтсутствуетВТ", "ЗадвоенныеВТ"));
	
	Элементы.СписокВременныеТаблицыPostgres.Обновить();
	Элементы.СписокПоляВременныхТаблицыPostgres.Обновить();
	
	// Удалим заготовки под создания ВТ
	Поз = СтрНайти(МенеджерРегистра.ТекстЗапросаPostgres, "insert into pg_temp.");
	МенеджерРегистра.ТекстЗапросаPostgres = Прав(МенеджерРегистра.ТекстЗапросаPostgres, СтрДлина(МенеджерРегистра.ТекстЗапросаPostgres) - Поз + 1 );
	МенеджерРегистра.Записать();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьОтборНаСервере()
	
	МенеджерЗаписи = РегистрыСведений.СохраненыеОтборыНастройкиТеста.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
	МенеджерЗаписи.Представление = Строка(РезультатыВыполненияЗапросов.КомпоновщикНастроек.ПолучитьНастройки().Отбор);
	МенеджерЗаписи.Имя = МенеджерЗаписи.Представление;
	МенеджерЗаписи.Настройка = Новый ХранилищеЗначения(РезультатыВыполненияЗапросов.КомпоновщикНастроек.ПолучитьНастройки());
	МенеджерЗаписи.Записать();
	ЗаполнитьКомандыЗагрузки();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыЗагрузки()
	
	Для каждого СтрокаТаблицы Из СохраненыеОтборыНастройкиТеста Цикл
		Имя = СтрШаблон("Отбор_%1", СтрокаТаблицы.Порядок);
		Элементы.Удалить(Элементы.Найти(Имя));
		Команды.Удалить(Команды.Найти(Имя));	
	КонецЦикла;
	
	СохраненыеОтборыНастройкиТеста.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Имя,
	|	Представление,
	|	Настройка
	|ИЗ
	|	РегистрСведений.СохраненыеОтборыНастройкиТеста
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СохраненыеОтборыНастройкиТеста.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Порядок = Сч;
		Имя = СтрШаблон("Отбор_%1", Сч);
		Команда = Команды.Добавить(Имя);
		Команда.Заголовок = НоваяСтрока.Имя;
		Команда.Действие = "ЗагрузитьОтбор"; 
		Элемент = Элементы.Добавить(Имя, Тип("КнопкаФормы"), Элементы.РезультатыВыполненияЗапросовОтборГруппаЗагрузитьОтбор);
		Элемент.ИмяКоманды = Имя;
		Сч = Сч + 1;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОтборНаСервере(ИмяКоманды) 
	
	//ЭлементНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкаТеста","Отбор",Новый Массив)[Число(СтрЗаменить(ИмяКоманды, "Отбор_", ""))];  
	СтрокаТаблицы = СохраненыеОтборыНастройкиТеста.НайтиСтроки(Новый Структура("Порядок", СтрЗаменить(ИмяКоманды, "Отбор_", "")))[0];
	РезультатыВыполненияЗапросов.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	// Переопределим параметр на ссылку
	НастройкиКомпановкиДанных = СтрокаТаблицы.Настройка.Получить();
	НастройкиКомпановкиДанных.ПараметрыДанных.Элементы[0].Значение = Объект.Ссылка;
	РезультатыВыполненияЗапросов.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(НастройкиКомпановкиДанных);
	Элементы.РезультатыВыполненияЗапросов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРедактированияСпискаОтборов(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьКомандыЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыполненияЭтапа(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Выполнено" И ДополнительныеПараметры.Свойство("Этап") И ДополнительныеПараметры.Этап = ПредопределенноеЗначение("Перечисление.ВидыЭтаповОбработки.СозданиеВременныхТаблиц") Тогда
			РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища); 
			Если РезультатВыполнения.ЭтапЗавершен Тогда
				ЗагрузитьИсправленныеСозданияВТ();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗавершениеВыполненияЭтапаНаСервере();
	Элементы.РезультатыВыполненияЗапросов.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеУдалениеДанныхСОтбором(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		
		Элементы.РезультатыВыполненияЗапросов.Обновить();
		ОбновитьДанныеСтатистики();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьИсправленныеСозданияВТ()
	
	ДанныеИсправленныхСозданийВТ = ДанныеИсправленныхСозданийВТ();
	КодыВозвратаДиалога = Новый СписокЗначений;
	Для каждого Данные  Из ДанныеИсправленныхСозданийВТ Цикл
		КодыВозвратаДиалога.Добавить(Данные.НастройкаТеста, СтрШаблон("""%1"" записей %2, исправленных ВТ %3", Данные.НастройкаТестаПредставление, Данные.КоличествоЗаписей, Данные.Количество)); 
		Если Данные.НастройкаТеста = Объект.Ссылка Тогда
			НужныйКод = КодыВозвратаДиалога.НайтиПоЗначению(Объект.Ссылка);
		КонецЕсли;
	КонецЦикла;                                                                                                                                                                                  
	КодыВозвратаДиалога.Добавить(КодВозвратаДиалога.Отмена); 
	
	Значение = КодыВозвратаДиалога.НайтиПоЗначению(Объект.Ссылка);
	Если Значение = Неопределено Тогда
		КодПоУмолчанию = КодВозвратаДиалога.Отмена;
	Иначе
		КодПоУмолчанию = Объект.Ссылка; 
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Выберете настройку для загрузки", КодыВозвратаДиалога, 60, КодПоУмолчанию);
	Если Ответ = КодВозвратаДиалога.Отмена Или Ответ = КодВозвратаДиалога.Таймаут Тогда
		Возврат;	
	КонецЕсли;
	
	ИсправленниеСозданияВременныхТаблиц(Ответ);
	ЗавершениеВыполненияЭтапаНаСервере();
	Элементы.РезультатыВыполненияЗапросов.Обновить();
		
КонецПроцедуры

&НаСервере
Функция ДанныеИсправленныхСозданийВТ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	| 	РС.НастройкаТеста,
	|	ПРЕДСТАВЛЕНИЕ(РС.НастройкаТеста) КАК НастройкаТестаПредставление,
	| 	КолЗаписей.КоличествоЗаписей,
	|	СУММА(1) КАК Количество
	|ИЗ
	|  	РегистрСведений.ИсправленныеСозданияВременныхТаблиц КАК РС
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ	
	|		НастройкаТеста,
	|		Количество(*) КАК КоличествоЗаписей
	|	ИЗ
	|	  	РегистрСведений.РезультатыВыполненияЗапросов
	|	ГДЕ
	|		НастройкаТеста В (ВЫБРАТЬ РАЗЛИЧНЫЕ НастройкаТеста ИЗ РегистрСведений.ИсправленныеСозданияВременныхТаблиц)
	|		И НЕ НастройкаТеста.ПометкаУдаления
	|	СГРУППИРОВАТЬ ПО	
	|		НастройкаТеста
	|	) КолЗаписей
	|ПО 	
	|	РС.НастройкаТеста = КолЗаписей.НастройкаТеста
	|ГДЕ
	|   НЕ РС.НастройкаТеста.ПометкаУдаления
	|СГРУППИРОВАТЬ ПО
	| 	КолЗаписей.КоличествоЗаписей,
	|	РС.НастройкаТеста
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл   
		
		Структура = Новый Структура("НастройкаТеста,НастройкаТестаПредставление,Количество,КоличествоЗаписей");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		Результат.Добавить(Структура);   
		
	КонецЦикла; 
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Процедура ЗавершениеВыполненияЭтапаНаСервере()
	
	ОбновитьДанныеСтатистики();
	ОбновитьОшибкиПреобразования();
	
КонецПроцедуры

&НаСервере
Процедура ИсправленниеСозданияВременныхТаблиц(НастройкаТеста = Неопределено)
	
	Если ЗначениеЗаполнено(НастройкаТеста) Тогда
		
		РезультатЗапроса = ИТМ_ОбщегоНазначенияСервер.ПолучитьРезультатЗапросаПоТаблице(
			"РегистрСведений.ИсправленныеСозданияВременныхТаблиц",
			,,,
			"*",
			"НастройкаТеста = &НастройкаТеста",
			Новый Структура("НастройкаТеста", НастройкаТеста));
			
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МенеджерРегистра = РегистрыСведений.РезультатыВыполненияЗапросов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерРегистра, Выборка, "НомерСобытия,НомерСессии");
			МенеджерРегистра.ДатаСобытия = Выборка.ДатаСоздания;
			МенеджерРегистра.НастройкаТеста = Объект.Ссылка;
			МенеджерРегистра.Прочитать(); 
			
			Если Не МенеджерРегистра.Выбран() Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Не удалось найти событие номером %1, сессии %2 создания ВТ %3", Выборка.НомерСобытия, Выборка.НомерСессии, Выборка.ИмяТаблицы));
				Продолжить;	
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(МенеджерРегистра.ОшибкаПреобразования) Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("В событии номером %1, сессии %2 нет ошибки преобразования при создании ВТ %3", Выборка.НомерСобытия, Выборка.НомерСессии, Выборка.ИмяТаблицы));
				Продолжить;	
			КонецЕсли;
			
			РеквизитыОшибки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МенеджерРегистра.ОшибкаПреобразования, "ОтсутствуетВТ,ЗадвоенныеВТ");
			ЭтоОшибкаСозданияВТ = РеквизитыОшибки.ОтсутствуетВТ Или РеквизитыОшибки.ЗадвоенныеВТ;
			Если Не ЭтоОшибкаСозданияВТ Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("В событии номером %1, сессии %2 некорректная ошибка преобразования при создании ВТ %3", Выборка.НомерСобытия, Выборка.НомерСессии, Выборка.ИмяТаблицы));
				Продолжить;	
			КонецЕсли;
			
			Если Не ОкончаниеИсправленияСозданияВТ(МенеджерРегистра, Выборка.ИмяТаблицы, Выборка.СкриптСоздания, РеквизитыОшибки) Тогда
				Возврат;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОшибкиПреобразования()
	
	ОшибкиПреобразования.Загрузить(НастройкаТестов_СозданиеЗапросов.ОшибкиПреобразования());
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтатистики()

	НастройкаТестовСервер.ОбновитьДанныеСтатистики(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыполнения(НаименованиеЗадания)
	
	ПараметрыВыполнения=ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Не ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ОбработкаБезФоновыхЗаданий", Ложь);
	ПараметрыВыполнения.ЗапуститьНеВФоне = ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ОбработкаБезФоновыхЗаданий", Ложь);

	Возврат ПараметрыВыполнения;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;

	Возврат ПараметрыОжидания;
	
КонецФункции

#КонецОбласти