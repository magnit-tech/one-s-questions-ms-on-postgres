

#Область Загрузка_данных

Функция ПолучитьТЗИзЛистаФайлаExcel(ПутьКФайлу = "", ИмяНомерЛиста = "", ЧислоСтрокШапки = 0) Экспорт
	
	ДанныеЛиста = ИТМ_РаботаСExcelКлиентСервер.ПолучитьДанныеЛистаФайлаExcel(ПутьКФайлу, ИмяНомерЛиста, ЧислоСтрокШапки);
	
	Возврат ПолучитьТЗПоДаннымОбластиExcel(ДанныеЛиста);
	
КонецФункции

Функция ПолучитьТЗПоДаннымОбластиExcel(ДанныеОбласти, ИсходнаяТЗ = Неопределено, ВысотаЗаголовка = 1) Экспорт
	
	Если ИсходнаяТЗ = Неопределено Тогда
		Результат = Новый ТаблицаЗначений;
	Иначе
		Результат = ИсходнаяТЗ.СкопироватьКолонки();
	КонецЕсли;
	
	МассивИменКолонок = Новый Массив;
	
	МаксЧислоСтрокТаблицы = 0;
	
	// << 16.08.2021 Берлизов Сергей: AUTOOPT-. Добавил проверку, если в таблице нет данных
	Если НЕ (ЗначениеЗаполнено(ДанныеОбласти) 
			И ЗначениеЗаполнено(ДанныеОбласти[0]) 
			И ДанныеОбласти[0].Количество() - ВысотаЗаголовка > 0) Тогда
		Возврат Результат;	
	КонецЕсли;
	// >> 16.08.2021 Берлизов Сергей
	
	Для Сч = 0 По ДанныеОбласти.ВГраница() Цикл
		МасивЗначенийКолонки = ДанныеОбласти[Сч];
		
		//Определить имя колонки по заголовку
		ИмяКолонки = "";
		Для Ин = 0 По ВысотаЗаголовка - 1 Цикл 
			ЗаголовокШапки = МасивЗначенийКолонки[Ин];
			ТекИмяКолонки = ПолучитьВалидныйКлюч(ЗаголовокШапки);
			
			Если ЗначениеЗаполнено(ТекИмяКолонки) Тогда
				ИмяКолонки = ТекИмяКолонки; 
				Если Результат.Колонки.Найти(ТекИмяКолонки) <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Удалить заголовок
		Для Ин = 0 По ВысотаЗаголовка - 1 Цикл
			МасивЗначенийКолонки.Удалить(0);
		КонецЦикла;
		
		МаксЧислоСтрокТаблицы = Макс(МаксЧислоСтрокТаблицы, МасивЗначенийКолонки.Количество());
		
		МассивИменКолонок.Добавить(ИмяКолонки);
		
		// << 19.10.2021 Шакун Денис: AUTOOPT-
		КолонкаРезультата = Неопределено;
		
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			КолонкаРезультата = Результат.Колонки.Найти(ИмяКолонки);
			
			//Убираем лишнее из числа
			Если КолонкаРезультата <> Неопределено И ТипЗнч(КолонкаРезультата.ТипЗначения.ПривестиЗначение(Неопределено)) = Тип("Число") Тогда
				Для Ин = 0 По МасивЗначенийКолонки.Вграница() Цикл Если ТипЗнч(МасивЗначенийКолонки[Ин]) = Тип("Строка") Тогда МасивЗначенийКолонки[Ин] = СтрЗаменить(МасивЗначенийКолонки[Ин]," ",""); КонецЕсли; КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		// >> 19.10.2021 Шакун Денис
		
		Если НЕ ЗначениеЗаполнено(ИмяКолонки) ИЛИ КолонкаРезультата <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// << 16.08.2021 Берлизов Сергей: AUTOOPT-. Исправил ошибку "Индекс находится за границами массива", если в таблице 1 строка с данными и 1 строка шапки. 
		// Строку шапки учли выше, удалив данные из массива по ней
		//ПримерЗначения = МасивЗначенийКолонки[ВысотаЗаголовка];
		ПримерЗначения = МасивЗначенийКолонки[0];
		// >> 16.08.2021 Берлизов Сергей
		
		ТипКолонки = ПолучитьОписаниеТиповПоТипу(ТипЗнч(ПримерЗначения));
		Если ТипЗнч(ПримерЗначения) = Тип("Строка") Тогда
			ТипКолонки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
		КонецЕсли;
		
		Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);

	КонецЦикла;
	
	//Заполню ТЗ пустыми строками для загрузки колонок
	Для Сч = 1 По МаксЧислоСтрокТаблицы Цикл Результат.Добавить(); КонецЦикла;
	
	Для Сч = 0 По ДанныеОбласти.ВГраница() Цикл
		Колонка = Результат.Колонки.Найти(МассивИменКолонок[Сч]);
		Результат.ЗагрузитьКолонку(ДанныеОбласти[Сч], Колонка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ФайлСуществует(ПолноеИмяФайла) Экспорт
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции

// 08.06.2020 Леонов Александр - Загрузка ТЗ Из ТабДок
Функция ПолучитьТЗИзТабличногоДокумента(ТабДок, Знач ЗаготовкаТЗ = Неопределено) Экспорт
	
	Если ЗаготовкаТЗ = Неопределено Тогда
		ЗаготовкаТЗ = ПолучитьЗаготовкуТЗПоТабличномуДокументу(ТабДок);
	КонецЕсли;
	
	Для ИндексСтроки = 2 По ТабДок.ВысотаТаблицы Цикл
		
		СтрокаТЗ = ЗаготовкаТЗ.Добавить();
		
		Для ИндексКолонки = 1 По ТабДок.ШиринаТаблицы Цикл
			ИмяКолонки = ЗаготовкаТЗ.Колонки.Получить(ИндексКолонки-1).Имя;
			
			ТекОбласть = ТабДок.Область(ИндексСтроки,ИндексКолонки,ИндексСтроки,ИндексКолонки);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекОбласть, "Значение") Тогда
				ТекЗначение = ТекОбласть.Значение;
			Иначе
				ТекЗначение = СокрЛП(ТекОбласть.Текст);
			КонецЕсли;
			
			СтрокаТЗ[ИмяКолонки] = ТекЗначение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗаготовкаТЗ;
	
КонецФункции

Функция ПолучитьЗаготовкуТЗПоТабличномуДокументу(ТабДок, НомерСтрокиШапки = Неопределено) Экспорт
	
	Если НомерСтрокиШапки = Неопределено Тогда
		НомерСтрокиШапки = 1;
	КонецЕсли;
	
	Рез = Новый ТаблицаЗначений;
	
	Для ИндексКолонки = 1 По ТабДок.ШиринаТаблицы Цикл
		
		ТекОбласть = ТабДок.Область(НомерСтрокиШапки,ИндексКолонки,НомерСтрокиШапки,ИндексКолонки);
		ПредставлениеКолонки = ТекОбласть.Текст;
		ИмяКолонки = ПолучитьВалидныйКлюч(ПредставлениеКолонки);
		
		ТипКолонки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
		
		ОбластьЗначения = ТабДок.Область(НомерСтрокиШапки+1,ИндексКолонки,НомерСтрокиШапки+1, ИндексКолонки);
		
		// << 07.06.2022 Шакун Денис: AUTOOPT-1950
		Если ЗначениеЗаполнено(ОбластьЗначения.Параметр) Тогда
			ИмяКолонки = ОбластьЗначения.Параметр;
		КонецЕсли;
		// >> 07.06.2022 Шакун Денис
		
		Если ОбластьЗначения.СодержитЗначение И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбластьЗначения, "ТипЗначения") Тогда
			ТипКолонки = ОбластьЗначения.ТипЗначения;
		КонецЕсли;
		
		Рез.Колонки.Добавить(ИмяКолонки, ТипКолонки, ПредставлениеКолонки);
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции	

Функция ПолучитьВалидныйКлюч(Знач Строка) Экспорт
	
	СтрокаЗапрещенныхСимволов = " ,.?/|\][{}();:'""`~!@#$%^&*№-+=" + Символы.НПП;
	Для Сч = 1 По СтрДлина(СтрокаЗапрещенныхСимволов) Цикл
		ТекСимвол = Сред(СтрокаЗапрещенныхСимволов, Сч, 1);
		Строка = СтрЗаменить(СокрЛП(Строка), ТекСимвол,"_");
	КонецЦикла;
	
	Если Найти("1234567890", Лев(Строка, 1)) > 0 Тогда
		Строка = "А_" + Строка;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, "__", "_");
	
	Возврат Строка;
	
КонецФункции

Функция ПолучитьОписаниеТиповПоТипу(Тип) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

//11.03.2021 Мурадян К.В. AUTOOPT-638
//Функция читает данные Excel таблицу табличным документом
//далее табдок передается в построитель запроса  
//возвращается готовая таблица значений или массив
//В табличном документе не должно быть объединенных строк
Функция ТабДоКвТЗПостроитель(ТабДок = Неопределено,ВернутьМассив = Ложь,ПутьКФайлуExcel = "") Экспорт
		
	ТаблицаДанных	= Новый ТаблицаЗначений;
	МассивДанных	= Новый Массив;
	
	Если ТабДок = Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;	
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(ПутьКФайлуExcel) Тогда		
			ТабДок.Прочитать(ПутьКФайлуExcel,
			,
			?(Врег(Прав(ПутьКФайлуExcel,4))= "XLSX",ТипФайлаТабличногоДокумента.XLSX,ТипФайлаТабличногоДокумента.XLS)
			);
		КонецЕсли;
		
		пПостроительЗапросов							= Новый ПостроительЗапроса;
		пПостроительЗапросов.ИсточникДанных				= Новый ОписаниеИсточникаДанных(ТабДок.Область()); 
		пПостроительЗапросов.ДобавлениеПредставлений	= ТипДобавленияПредставлений.НеДобавлять;
		пПостроительЗапросов.ЗаполнитьНастройки();
		
		пПостроительЗапросов.Выполнить();
		ТаблицаДанных = пПостроительЗапросов.Результат.Выгрузить();		
		Если ВернутьМассив Тогда		
			Для Каждого Стр Из ТаблицаДанных Цикл 		
				пСтрокаТаблицы = Новый Структура;
				Для Каждого ИмяКолонки Из ТаблицаДанных.Колонки Цикл
					пСтрокаТаблицы.Вставить(ИмяКолонки.Имя, Стр[ИмяКолонки.Имя]);
				КонецЦикла; 		
				МассивДанных.Добавить(пСтрокаТаблицы); 		
			КонецЦикла;
		КонецЕсли;	
	Исключение		
	КонецПопытки;
	
	Если ВернутьМассив Тогда
		Возврат МассивДанных;
	Иначе
		Возврат ТаблицаДанных;
	КонецЕсли;
	
КонецФункции

//26.05.2021 Мурадян К.В. AUTOOPT-942 
//Проверка условий заказа справочник "ИТМ_УсловияЗаказа"
//Таблица = Либо ТЗ либо ДанныеФормыКоллекция
Процедура ПроверитьУсловияЗаказа(Ссылка,Отказ,Знач Таблица = Неопределено) Экспорт
	
	Если Таблица <> Неопределено И ТипЗнч(Таблица) = Тип("ДанныеФормыКоллекция") Тогда
		Таблица = Таблица.Выгрузить();
	КонецЕсли;	
	Справочники.ИТМ_УсловияЗаказа.ПроверитьУсловияЗаказа(Ссылка,Отказ,Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область Работа_с_управляемой_формой

// << 30.09.2020 Шакун Денис
Функция ДобавитьЭлементФормы(ЭлементыФормы, ИмяЭлемента, ТипЭлементаФормы, ИмяГруппыЭлементов = "", ЗаголовокЭлемента="", ПутьКДанным = "") Экспорт
	
	ДобавленныйЭлемент = ЭлементыФормы.Добавить(ИмяЭлемента, ТипЭлементаФормы, ?(ЗначениеЗаполнено(ИмяГруппыЭлементов), ЭлементыФормы[ИмяГруппыЭлементов], Неопределено));
	Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		ДобавленныйЭлемент.Заголовок = ЗаголовокЭлемента;
	КонецЕсли;	
	// << 13.11.2020 Берлизов Сергей: AUTOOPT- 
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		ДобавленныйЭлемент.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	// >> 13.11.2020 Берлизов Сергей
	Возврат ДобавленныйЭлемент; 
КонецФункции

Функция ДобавитьПолеФормы(ЭлементыФормы,ВидЭлемента,ИмяЭлемента,ИмяГруппыЭлементов="",ПутьКДанным,ЗаголовокЭлемента="") Экспорт
	Если ЗначениеЗаполнено(ИмяГруппыЭлементов) Тогда
		ГруппаЭлементов = ЭлементыФормы.Найти(ИмяГруппыЭлементов);
	КонецЕсли;	
		
	ДобавленныйЭлемент = ЭлементыФормы.Добавить(ИмяЭлемента,Тип("ПолеФормы"),ГруппаЭлементов);
	ДобавленныйЭлемент.Вид = ВидПоляФормы[ВидЭлемента];
	ДобавленныйЭлемент.ПутьКДанным = ПутьКДанным;
	Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		ДобавленныйЭлемент.Заголовок = ЗаголовокЭлемента;
	КонецЕсли;	
	
	Возврат ДобавленныйЭлемент; 
КонецФункции

Функция ДобавитьТаблицуФормы(Форма, ИмяЭлемента, ИмяГруппыЭлементов = "", ПутьКДанным, ЗаголовокЭлемента = "") Экспорт
	Если ЗначениеЗаполнено(ИмяГруппыЭлементов) Тогда
		ГруппаЭлементов = Форма.Элементы.Найти(ИмяГруппыЭлементов);
	КонецЕсли;	
		
	ДобавленныйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента,Тип("ТаблицаФормы"),ГруппаЭлементов);
	ДобавленныйЭлемент.ПутьКДанным = ПутьКДанным;
	Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		ДобавленныйЭлемент.Заголовок = ЗаголовокЭлемента;
	КонецЕсли;	
	
	Возврат ДобавленныйЭлемент; 
КонецФункции

Функция ДобавитьПолеВвода(Форма, ИмяЭлемента, ИмяГруппыЭлементов = "", ПутьКДанным, ЗаголовокЭлемента = "") Экспорт
	Элемент = ДобавитьПолеФормы(Форма.Элементы, "ПолеВвода", ИмяЭлемента, ИмяГруппыЭлементов, ПутьКДанным, ЗаголовокЭлемента);
	Возврат Элемент;
КонецФункции

// Функция создает команду на форме с заданным именем и действием, Если действие не задано, 
// то будет выбрано стандартное действие "Подключаемый_ВыполнитьПереопределяемуюКоманду"
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, где будет добавлена команда
//   ИмяКоманды - Строка - Присваиваемое имя команды
//   Действие - Строка - Необязательный, действие, которое будет вызывать команда, по умолчанию Подключаемый_ВыполнитьПереопределяемуюКоманду 
// Возвращаемое значение:
//   КомандаФормы - Созданная команда формы
//
Функция ДобавитьКоманду(Форма, ИмяКоманды, Действие = "", ИзменяетСохраняемыеДанные = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КонецЕсли;
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие = Действие;
	КомандаФормы.ИзменяетСохраняемыеДанные = ИзменяетСохраняемыеДанные;
	Возврат КомандаФормы;
	
КонецФункции

Процедура ДобавитьРеквизитФормы(Форма, ИмяРеквизита, Знач ОписаниеТипаРеквизита, Путь = "", Заголовок = "", СохраняемыеДанные = Истина, ПроверятьСуществование = Ложь) Экспорт
	
	// << 25.08.2021 Шакун Денис: AUTOOPT
	Если ПроверятьСуществование Тогда
		РеквизитСуществует = Ложь;
		
		Если ЗначениеЗаполнено(Путь) Тогда
			РеквизитыФормы = Форма.ПолучитьРеквизиты(Путь);
			Для Каждого Реквизит Из РеквизитыФормы Цикл
				Если Реквизит.Имя = ИмяРеквизита Тогда
					РеквизитСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,ИмяРеквизита) Тогда
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// >> 25.08.2021 Шакун Денис
	
	//Если это не описание типов, то создадим нужный тип
	Если ТипЗнч(ОписаниеТипаРеквизита) = Тип("Строка") Тогда
		ОписаниеТипаРеквизита = Новый ОписаниеТипов(ОписаниеТипаРеквизита);
	ИначеЕсли ТипЗнч(ОписаниеТипаРеквизита) = Тип("Тип") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ОписаниеТипаРеквизита);
		ОписаниеТипаРеквизита = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаРеквизита, Путь, Заголовок, СохраняемыеДанные);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

// 03.11.2020 Леонов Александр
Функция ДобавитьКнопку(Форма, ИмяЭлемента, ИмяКоманды, ГруппаЭлементов = "", ЗаголовокЭлемента = "") Экспорт
	
	Если ТипЗнч(ГруппаЭлементов) = Тип("Строка") Тогда
		ГруппаКнопки = ?(ЗначениеЗаполнено(ГруппаЭлементов), Форма.Элементы[ГруппаЭлементов], Неопределено);
	Иначе
		ГруппаКнопки = ГруппаЭлементов;
	КонецЕсли;
	
	ДобавленныйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента,  Тип("КнопкаФормы"), ГруппаКнопки);
	ДобавленныйЭлемент.ИмяКоманды = ИмяКоманды;
	Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		ДобавленныйЭлемент.Заголовок = ЗаголовокЭлемента;
	КонецЕсли;
	
	Возврат ДобавленныйЭлемент; 
КонецФункции

// 13.11.2020 Леонов Александр
Функция ДобавитьПолеФлажка(Форма, ИмяЭлемента, ПутьКДанным, ИмяГруппыЭлементов = "",ЗаголовокЭлемента = "") Экспорт
	Возврат ИТМ_ОбщегоНазначенияСервер.ДобавитьПолеФормы(Форма.Элементы, "ПолеФлажка", ИмяЭлемента, ИмяГруппыЭлементов, ПутьКДанным, ЗаголовокЭлемента);	
КонецФункции

// 07.12.2020 Леонов Александр
Процедура ПереместитьЭлементФормыВнутриГруппы(Форма, Элемент, ЭлементПоложения) Экспорт
	
	Если ТипЗнч(ЭлементПоложения) = Тип("Строка") Тогда
		ЭлементПоложения = Форма.Элементы.Найти(ЭлементПоложения);
	КонецЕсли;
	
	Форма.Элементы.Переместить(Элемент, Элемент.Родитель, ЭлементПоложения);
КонецПроцедуры

Процедура ЗаполнитьМассивПодчиненныхЭлементов(ГоловнойЭлемент, МассивПодчиненныхЭлементов) Экспорт
	
	Для Каждого Элемент Из ГоловнойЭлемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ЗаполнитьМассивПодчиненныхЭлементов(Элемент, МассивПодчиненныхЭлементов);
		Иначе
			МассивПодчиненныхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ИмяЗначенияПеречисления(Значение) Экспорт
	
	ОбъектМетаданных = Значение.Метаданные();
	ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);
	Возврат ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
КонецФункции

//Генерит ТЗ с нужными полями, поля передаем строкой, разделитель "," e1cib
Функция ПолучитьТаблицуЗначений(ПоляСтрокой) Экспорт 
	
	РезТаблицаЗначений = Новый ТаблицаЗначений;
	МассивИменПолей = СтрРазделить(ПоляСтрокой, ",", Ложь);
	
	Для Каждого ИмяПоля Из МассивИменПолей Цикл
		РезТаблицаЗначений.Колонки.Добавить(СокрЛП(ИмяПоля));
	КонецЦикла;
	
	Возврат РезТаблицаЗначений;
	
КонецФункции

Процедура НачатьБлокировку(ИмяОбъекта,Отборы=Неопределено,РежимБлокировки=Неопределено) Экспорт
	
	//Блокировка невозможна вне транзакции
	Если ТранзакцияАктивна()=Ложь Тогда
		ЗаписьЖурналаРегистрации("ОшибкаУстановкиУправляемойБлокировки",УровеньЖурналаРегистрации.Информация,,,"Блокировка на объект " + ИмяОбъекта + " не установлена, т.к. выполняется вне транзакции.");
		Возврат;
	КонецЕсли;
	
	Если РежимБлокировки = Неопределено Тогда
		РежимБлокировки = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить(ИмяОбъекта);
	ЭлементБлокировки.Режим = РежимБлокировки;
	
	//Устанавливаем ключи блокировки для блокирования конкретных записей
	Если ТипЗнч(Отборы) = Тип("Структура") Тогда
		Для Каждого ЭлементОтбора Из Отборы Цикл
			ЭлементБлокировки.УстановитьЗначение(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаМассивомСтруктур(ТекстЗапроса,ПараметрыЗапроса) Экспорт
	Результат=Новый Массив;
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Для Каждого ЭлементПараметров ИЗ ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ЭлементПараметров.Ключ,ЭлементПараметров.Значение);
	КонецЦикла;	
	
	Выборка=Запрос.Выполнить().Выбрать();
	Колонки=Выборка.Владелец().Колонки;
	Пока Выборка.Следующий() Цикл
		СтруктураРезультата=Новый Структура;
		
		Для Каждого Колонка ИЗ Колонки Цикл
			СтруктураРезультата.Вставить(Колонка.Имя,Выборка[Колонка.Имя]);		
		КонецЦикла;
		
		Результат.Добавить(СтруктураРезультата);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ЗаписатьОбъект(Объект,ПараметрЗаписи1=Неопределено,ПараметрЗаписи2=Неопределено) Экспорт
	МетаданныеОбъекта=Объект.Метаданные();
	ПроверятьЗаполнение=Истина;
		
	//Документы проверяются только в момент проведения
	Если 	ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) //Документ, не проводится, хотя может
			И ПараметрЗаписи1<>РежимЗаписиДокумента.Проведение 
			И МетаданныеОбъекта.Проведение=Метаданные.СвойстваОбъектов.Проведение.Разрешить
			Тогда
		ПроверятьЗаполнение=Ложь;
	КонецЕсли;	
	
	//Проверим заполнение
	Если ПроверятьЗаполнение И НЕ Объект.ПроверитьЗаполнение() Тогда
		//{+- #Лелеко 2021.12.13 11:04:52 #AUTOOPT делаем более информативное исключение
		//ВызватьИсключение "Поля объекта заполнены некорректно!";
		ПредставлениеТипа = СтрЗаменить(Строка(ТипЗнч(Объект)), " объект", "");
		Если Объект.ЭтоНовый() Тогда
			ТекстИсключения = СтрШаблон("Поля создаваемого объекта '%1' заполнены некорректно", ПредставлениеТипа);
		Иначе
			ТекстИсключения = СтрШаблон("Поля объекта '%2' типа '%1' заполнены некорректно", ПредставлениеТипа, Объект);	
		КонецЕсли;
		ВызватьИсключение ТекстИсключения;
		//-+} #Лелеко 2021.12.13 11:04:52
	КонецЕсли;	
	
	//Запишем
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Объект.Записать(ПараметрЗаписи1,ПараметрЗаписи2);
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		Объект.Записать(ПараметрЗаписи1);
		
	Иначе	
		Объект.Записать();	
	КонецЕсли;	
	
КонецПроцедуры

// Получает результат запроса с необходимыми полями из произвольной таблицы БД
//
// Параметры:
//  Таблица - Строка - Имя таблицы для запроса
//  Первые - Число - Задает ограничение на выборку первых записей. Если 0, то ограничения не будет
//				Значение по умолчанию: 0 
//  Разрешенные - Булево - Устанавливает или отменяет выборку разрешенных записей
//				Значение по умолчанию: Ложь 
//  Различные - Булево - Устанавливает или отменяет выборку различных записей	 записей
//				Значение по умолчанию: Ложь 
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры. Можно передать 1 или "*".
//              Например, "Код, Наименование, Родитель". 
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//				Значение по умолчанию: "Ссылка" 
//  Отборы 	  - Строка, Строка отборов, например, "Ссылка = &Ссылка"
//  	 	  - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              значение отбора без символа "&", а в качестве значения фактическое имя поля в таблице.
//				В этот случае в отбор устанавливается на равенство 
//              Например, Новый Структура("Ссылка", "Ссылка"), что значит "Ссылка = &Ссылка".
//				Необязательно
//  Параметры  - Структура, ФиксированнаяСтруктура - для задания параметров запроса. В качестве ключа передается
//				имя реквизита, а в качестве значения - его значение
//              Например, Новый Структура("Ссылка", Ссылка).
//  Сортировка - Строка - представление сортировки без слова "УПОРЯДОЧИТЬ", 
//              Например, "Код Возр, Наименование Убыв".
//			   - Структура - Задает сортировку запроса, где ключ - поле, а значение - строка "Возр" и "Убыв". 
//				Если значение не задано, то считается, что это "Возр".
//              Например, Новый Структура("Код, Наименование",,  "Убыв").
//				Необязательно
//  Итоги - Строка - итоги запроса 
//              Например, "ИТОГИ СУММА(Количество) ПО ОБЩИЕ".
//	Автоупорядочивание - автоупорядочивание выборки.
//				Значение по умолчанию: Ложь. 
//  Отборы 	  - Строка, Строка Соединения с основной таблицей, например 
//					ЛЕВОЕ СОЕДИНЕНИЕ
//						Документ.ЗаказКлиента КАК ЗаказКлиента
//					ПО
//						Таблица.ДокументОснование = ЗаказКлиента.Ссылка
//
// Возвращаемое значение:
//  РезультатЗапроса.
Функция ПолучитьРезультатЗапросаПоТаблице(	Таблица, 
											Первые = 0,
											Разрешенные = Ложь,
											Различные = Ложь,
											Знач Реквизиты = "Ссылка", 
											Знач Отборы = "", 
											Знач Параметры = Неопределено, 
											Знач Сортировка = "", 
											Знач Итоги = "", 
											Автоупорядочивание = Ложь,
											Знач Соединения = "") Экспорт
	
	Если Реквизиты = "1" Или Реквизиты = 1 Тогда
		ТекстПолей = "1 КАК Поле";
	ИначеЕсли Реквизиты = "*" Тогда
		ТекстПолей = "*";
	Иначе	
		Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
			Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура;
		Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
			СтруктураРеквизитов = Реквизиты;
		ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
			Для Каждого Реквизит Из Реквизиты Цикл
				СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
			КонецЦикла;
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %3'"), Строка(ТипЗнч(Реквизиты)));
		КонецЕсли;
		
		ТекстПолей = "";
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
			              СокрЛП(КлючИЗначение.Значение),
			              СокрЛП(КлючИЗначение.Ключ));
			
			Псевдоним = СокрЛП(КлючИЗначение.Ключ);
			
			ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
		КонецЦикла;
	КонецЕсли;
	
	ТекстОтбора = "";
	Если ТипЗнч(Отборы) = Тип("Строка") Тогда
		ТекстОтбора = Отборы;
	Иначе
		Для каждого КлючИЗначение Из Отборы Цикл
			ТекстОтбора = КлючИЗначение.Ключ + " = &" + ?(ЗначениеЗаполнено(КлючИЗначение.Значение), КлючИЗначение.Значение, КлючИЗначение.Ключ)  + " И ";
		КонецЦикла;
		ТекстОтбора = Лев(ТекстОтбора, СтрДлина(ТекстОтбора) - 3);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбора) Тогда
		ТекстОтбора	= "ГДЕ " + Символы.ПС + ТекстОтбора
	КонецЕсли;
	
	ТекстСортировки = "";
	Если ТипЗнч(Сортировка) = Тип("Строка") Тогда
		ТекстСортировки = Сортировка;
	Иначе
		Для каждого КлючИЗначение Из Отборы Цикл
			ТекстСортировки = КлючИЗначение.Ключ + ?(ЗначениеЗаполнено(КлючИЗначение.Значение), " " + КлючИЗначение.Значение, "") + ", ";
		КонецЦикла;
		ТекстСортировки = Лев(ТекстСортировки, СтрДлина(ТекстСортировки) - 2);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстСортировки) Тогда
		ТекстСортировки	= "УПОРЯДОЧИТЬ ПО " + Символы.ПС + ТекстСортировки;
	КонецЕсли;
	
	ТекстАвтоупорядочивания = ?(Автоупорядочивание, "АВТОУПОРЯДОЧИВАНИЕ", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ " + ?(Первые = 0, "", "ПЕРВЫЕ " + Формат(Первые, "ЧЦ=10; ЧГ=0")) + ?(Разрешенные, " РАЗРЕШЕННЫЕ ", "") + ?(Различные, " РАЗЛИЧНЫЕ ", "") + "
	|	" + ТекстПолей + "
	|ИЗ
	|	" + Таблица + " КАК Таблица
	|" + Соединения + "
	|" + ТекстОтбора + "
	|" + ТекстСортировки + "
	|" + Итоги + "
	|" + ТекстАвтоупорядочивания + "
	|";
	
	Если Не Параметры = Неопределено Тогда
		Для каждого КлючИЗначение Из Параметры Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Запрос.Выполнить();
	
КонецФункции

// Выполняет замену реквизитов в произвольном объекте либо его табличной части.
//
// Параметры:
//  Ссылки - Массив - массив с объектами для замены
//  ЗначенияРеквизитов - Структура - Ключ - имя реквизита, Значение - требуемое значение реквизита, которое нужно установить. 
//  ИмяТабличнойЧасти - Строка - Имя табличной части, если требуется изменить реквизиты в табличной части
//  ДополнительныеОтборы - Строка, Строка дополнительных отборов, например, "Статус = &Сатус"
//  	 	  - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              значение отбора без символа "&", а в качестве значения фактическое имя поля в таблице.
//				В этот случае в отбор устанавливается на равенство 
//              Например, Новый Структура("Сатус", "Сатус"), что значит "Сатус = &Сатус".
//  ПараметрыДополнительныхОтборов  - Структура, ФиксированнаяСтруктура - для задания параметров запроса. В качестве ключа передается
//				имя реквизита, а в качестве значения - его значение
//              Например, Новый Структура("Сатус", Перечисления.Статусы.Закрыт).
//	ВыполнятьВТранзакции - булево, если требуется выполнить замену в транзакции
//	БлокироватьОбъекты - булево, если требуется выполнить блокирование объектов перед изменением
Процедура ВыполнитьИзменениеРеквизитовОбъектов(	Знач Ссылки,
												Знач ЗначенияРеквизитов, 
												ИмяТабличнойЧасти = "", 
												Знач ДополнительныеОтборы = "",
												Знач ПараметрыДополнительныхОтборов = Неопределено,
												Знач ВыполнятьВТранзакции = Ложь,
	                                            Знач БлокироватьОбъекты = Ложь) Экспорт 
	Если ЗначениеЗаполнено(Ссылки) И ЗначениеЗаполнено(ЗначенияРеквизитов) Тогда
		МетаданныеОбъекта = Ссылки[0].Метаданные();
		ИмяТаблицы = МетаданныеОбъекта.ПолноеИмя();
		ЭтоДокумент = Метаданные.Документы.Содержит(МетаданныеОбъекта);	
		
		СтрокаОтбора = "Ссылка В (&Ссылки) И (";
		СтруктураОтбора = Новый Структура("Ссылки", Ссылки);
		Сч = 1;
		Для каждого КиЗ Из ЗначенияРеквизитов Цикл
			СтрокаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2 %3 <> &Параметр_%4", 
				СтрокаОтбора, 
				?(Сч = 1, "", "ИЛИ"), 
				КиЗ.Ключ, 
				Строка(Сч));
			СтруктураОтбора.Вставить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Параметр_%1", Строка(Сч)), КиЗ.Значение);
			Сч = Сч + 1
		КонецЦикла;
		СтрокаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1)", СтрокаОтбора);
		Если ЗначениеЗаполнено(ДополнительныеОтборы) Тогда
			СтрокаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 И %2", СтрокаОтбора, ДополнительныеОтборы);	
		КонецЕсли;                                                                  
		Если ЗначениеЗаполнено(ПараметрыДополнительныхОтборов) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураОтбора, ПараметрыДополнительныхОтборов);	
		КонецЕсли;
		
		Поля = Новый Структура("Ссылка");
		Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
			ИмяТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2", ИмяТаблицы, ИмяТабличнойЧасти);
			Если ЭтоДокумент Тогда
				Поля.Вставить("Проведен", "Ссылка.Проведен")
			КонецЕсли;
			Различные = Истина;
		Иначе
			Если ЭтоДокумент Тогда
				Поля.Вставить("Проведен");
			КонецЕсли;
			Различные = Ложь;
		КонецЕсли;
		РезультатЗапроса = ИТМ_ОбщегоНазначенияСервер.ПолучитьРезультатЗапросаПоТаблице(
			ИмяТаблицы,
			,,Различные,
			Поля,
			СтрокаОтбора,
			СтруктураОтбора);
		Если Не РезультатЗапроса.Пустой() Тогда
			Если БлокироватьОбъекты Тогда
				ВыполнятьВТранзакции = Истина;	
			КонецЕсли;
			Если ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();	
			КонецЕсли;
			Если БлокироватьОбъекты Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				Блокировка.Заблокировать(); 
			КонецЕсли;
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
					Для каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗначенияРеквизитов);
					КонецЦикла;		
				Иначе	
					ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов);
				КонецЕсли;
				Если ЭтоДокумент И Выборка.Проведен Тогда
					ИТМ_ОбщегоНазначенияСервер.ЗаписатьОбъект(Объект, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Иначе	
					ИТМ_ОбщегоНазначенияСервер.ЗаписатьОбъект(Объект, РежимЗаписиДокумента.Запись);
				КонецЕсли; 
			КонецЦикла; 
			Если ВыполнятьВТранзакции Тогда
				ЗафиксироватьТранзакцию();	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры

Процедура ЗначенияРеквизитовОбъектаВСтруктуру(Ссылка, Реквизиты, СтруктураПриемник, Заменять=Ложь, ВыбратьРазрешенные = Ложь) Экспорт
	Если НЕ Заменять Тогда //Уберем реквизиты, которые есть в структуре приемнике
		ПолучаемыеРеквизиты=Новый Структура;	
		Для Каждого ЭлементСтруктурыРеквизитов ИЗ Реквизиты Цикл
			Если СтруктураПриемник.Свойство(ЭлементСтруктурыРеквизитов.Ключ) Тогда //Продолжить
				Продолжить;
			КонецЕсли;
			
			ПолучаемыеРеквизиты.Вставить(ЭлементСтруктурыРеквизитов.Ключ,ЭлементСтруктурыРеквизитов.Значение);
		КонецЦикла;	
	Иначе
		ПолучаемыеРеквизиты=Реквизиты;
	КонецЕсли;
	
	Если ПолучаемыеРеквизиты.Количество()=0 Тогда //Возврат
		Возврат;
	КонецЕсли;
	
	РеквизитыСсылки=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,ПолучаемыеРеквизиты,ВыбратьРазрешенные);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПриемник,РеквизитыСсылки,Истина);
КонецПроцедуры
// >> 30.09.2020 Шакун Денис

// 18.11.2020 Леонов Александр
Процедура УдалитьСтрокиТаблицыПоОтбору(Таблица, Отбор) Экспорт
	УдаляемыеСтроки = Таблица.НайтиСтроки(Отбор);
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Таблица.Удалить(УдаляемаяСтрока);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьСтрокиТаблицыНеИзОтбора(Таблица, Отбор) Экспорт
	СохраняемыеСтроки = Таблица.НайтиСтроки(Отбор);
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СохраняемыеСтроки.Найти(СтрокаТаблицы) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Таблица.Удалить(УдаляемаяСтрока);
	КонецЦикла;
КонецПроцедуры

// 23.12.2020 Леонов Александр
Функция ИменаКолонокРезультатаЗапросаСтрокой(РезультатЗапроса) Экспорт
	
	Результат = "";
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат = Результат + ?(ЗначениеЗаполнено(Результат), ",", "") + Колонка.Имя;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// 13.01.2021 Леонов Александр
Процедура ОповеститьОНеНайденныхЭлементах(РезультатЗапроса, ИмяОбъектовПоиска, ИмяПоляПоиска = "",Шаблон = "") Экспорт
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиСоЗначениемПоляПоиска = РезультатЗапроса.Колонки[0].Имя;
	Если Не ЗначениеЗаполнено(ИмяПоляПоиска) Тогда
		ИмяПоляПоиска = ИмяКолонкиСоЗначениемПоляПоиска;
	КонецЕсли;
	//11.08.2021 Мурадян К.В. AUTOOPT-AUTOOPT-1153	 
	Если НЕ ЗначениеЗаполнено(Шаблон) Тогда 
		Шаблон = "Не найдены %1, у которых поле %2 = ";
	//11.08.2021 Мурадян К.В. AUTOOPT-AUTOOPT-1153	 	
	КонецЕсли;
	ТекстСообщения = СтрШаблон(Шаблон, ИмяОбъектовПоиска, ИмяПоляПоиска);  
	
	//<< 26.07.2021 Мурадян К.В. AUTOOPT-1104
	МассивЭлементов = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Значение = СокрЛП(Выборка[ИмяКолонкиСоЗначениемПоляПоиска]);
		Если ЗначениеЗаполнено(Значение) И МассивЭлементов.Найти(Значение) = Неопределено Тогда
			МассивЭлементов.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивЭлементов) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + Символы.ПС + СтрСоединить(МассивЭлементов, Символы.ПС));
	КонецЕсли;
	//>> 26.07.2021 Мурадян К.В. AUTOOPT-1104
	
КонецПроцедуры

#Область Трансформация_таблицы_значений

// 02.12.2020 Леонов Александр
Функция ТаблицуЗначенийВМассив(ТаблицаЗначений, Колонки = "", ПерваяПустаяСтруктура = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Колонки) Тогда
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Колонки = Колонки + ?(ЗначениеЗаполнено(Колонки), ",", "") + Колонка.Имя;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИТМ_ОбщегоНазначенияКлиентСервер.ТаблицаФормыВМассив(ТаблицаЗначений, Колонки, ПерваяПустаяСтруктура);
	
КонецФункции

// 05.02.2021 Леонов Александр: AUTOOPT
Функция ТабличныйДокументПоТаблицеЗначений(ТаблицаЗначений) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	//Заполнение заголовка
	НомерСтрокиЗаголовка = 1;
	Для СчетчикКолонок = 1 По ТаблицаЗначений.Колонки.Количество() Цикл
		
		ТекКолонкаТЗ = ТаблицаЗначений.Колонки[СчетчикКолонок-1];
		ИмяКолонки = ТекКолонкаТЗ.Имя;
		ЗаголовокКолонки = ТекКолонкаТЗ.Заголовок;
		ШиринаЗаголовка = ПолучитьШиринуКолонкиПоЗаголовку(ЗаголовокКолонки, ТекКолонкаТЗ.Ширина);
		УказатьШиринуКолонкиТабличногоДокумента(Результат, СчетчикКолонок, ШиринаЗаголовка);
		
		ОбластьЗаголовка = Результат.Область(НомерСтрокиЗаголовка, СчетчикКолонок, НомерСтрокиЗаголовка, СчетчикКолонок);
		ОбластьЗаголовка.Текст = ЗаголовокКолонки;
		ПрименитьКОбластиТабличногоДокументаОформлениеЗаголовка(ОбластьЗаголовка);
		
	КонецЦикла;//Перебор колонок
	
	//Заполнение строк
	СчетчикСтрок = НомерСтрокиЗаголовка;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Для СчетчикКолонок = 1 По ТаблицаЗначений.Колонки.Количество() Цикл
		
			ИмяКолонки = ТаблицаЗначений.Колонки[СчетчикКолонок-1].Имя;
			
			ОбластьЗначения = Результат.Область(СчетчикСтрок, СчетчикКолонок, СчетчикСтрок, СчетчикКолонок);
			ОбластьЗначения.СодержитЗначение = Истина;
			ОбластьЗначения.Значение = Строка[ИмяКолонки];
		КонецЦикла;
		
	КонецЦикла;
	
	//Оформление строк
	ОбластьСтрок = Результат.Область(НомерСтрокиЗаголовка, 1, НомерСтрокиЗаголовка + ТаблицаЗначений.Количество(), ТаблицаЗначений.Колонки.Количество());
	ПрименитьКОбластиТабличногоДокументаОформлениеСтрок(ОбластьСтрок);
	
	Возврат Результат;
КонецФункции

Процедура ПрименитьКОбластиТабличногоДокументаОформлениеЗаголовка(ОбластьТабличногоДокумента) Экспорт
	ОбластьТабличногоДокумента.Шрифт = ШрифтыСтиля.ЗаголовкиСтрокШрифт;
	ОбластьТабличногоДокумента.ЦветФона = Новый Цвет(220,230,240);//ЦветаСтиля.ЗаголовкиСтрокЦветТекста;
	ОбластьТабличногоДокумента.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьТабличногоДокумента.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЛинияОбводки = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ОбластьТабличногоДокумента.Обвести(ЛинияОбводки, ЛинияОбводки, ЛинияОбводки, ЛинияОбводки);
КонецПроцедуры

Процедура ПрименитьКОбластиТабличногоДокументаОформлениеСтрок(ОбластьТабличногоДокумента) Экспорт
	ЛинияОбводки = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ОбластьТабличногоДокумента.Обвести(ЛинияОбводки, ЛинияОбводки, ЛинияОбводки, ЛинияОбводки);
КонецПроцедуры

Функция ПолучитьШиринуКолонкиПоЗаголовку(Заголовок, ТекШирина)
	МаксШиринаКолонки = 60;
	КоэфициентШириныЗаголовка = 18/14;
	ШиринаПоТексту = СтрДлина(Заголовок) * КоэфициентШириныЗаголовка;
	
	Возврат Мин(МаксШиринаКолонки, Макс(ШиринаПоТексту, ТекШирина));
КонецФункции

Процедура УказатьШиринуКолонкиТабличногоДокумента(ТабличныйДокумент, НомерКолонки, Ширина) Экспорт
	АдресКолонки = "C" + Формат(НомерКолонки,"ЧГ=0");
	ТабличныйДокумент.Область(АдресКолонки).ШиринаКолонки = Ширина;
КонецПроцедуры

// 12.02.2021 Леонов Александр: AUTOOPT
Функция ТекстCSVПоТаблицеЗначений(ТаблицаЗначений, Разделитель = "", ВыводитьЗаголовки = Истина) Экспорт
	Если Не ЗначениеЗаполнено(Разделитель) Тогда
		Разделитель = ";";
	КонецЕсли;
	
	Результат = "";
	
	//Заголовок
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Заголовок = ?(ВыводитьЗаголовки И ЗначениеЗаполнено(Колонка.Заголовок), Колонка.Заголовок, Колонка.Имя);
		Результат = Результат + Заголовок + Разделитель;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		Результат = Результат + Символы.ПС;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ЗначениеКолонки = Строка[Колонка.Имя];
			
			Если ТипЗнч(ЗначениеКолонки) = Тип("Дата") Тогда
				ЗначениеКолонки = Формат(ЗначениеКолонки, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			Результат = Результат + ЗначениеКолонки + Разделитель;
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	Возврат Результат
КонецФункции

#КонецОбласти

//28.06.2022 Мурадян К.В.
//Функция определяет есть реквизит у формы или объекта
Функция ЕстьРеквизит(Данные, ИмяСвойства) Экспорт
	
	ЕстьСвоство = Ложь;
    
    Структура = Новый Структура(ИмяСвойства, Неопределено);
    
    ЗаполнитьЗначенияСвойств(Структура, Данные);
    
    Если Структура[ИмяСвойства] = Неопределено Тогда
        Структура[ИмяСвойства] = Ложь;
        
        ЗаполнитьЗначенияСвойств(Структура, Данные);
        
        Если Структура[ИмяСвойства] <> Ложь Тогда
            ЕстьСвоство = Истина;
        КонецЕсли;
    Иначе
        ЕстьСвоство = Истина;
    КонецЕсли;
    
    Возврат ЕстьСвоство;
	
КонецФункции

Функция КрайнееФоновоеЗаданиеПоРегламентномуЗаданию(РегламентноеЗадание) Экспорт 
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("РегламентноеЗадание", РегламентноеЗадание));
	Если ЗначениеЗаполнено(Массив) Тогда
		Возврат Массив[0];		
	КонецЕсли;
КонецФункции

// 30.06.2021 Берлизов Сергей: AUTOOPT-1040. Скрытие во всх формах команды ввода на основании Типового БП Задание,
// если есть кнопка команды вызова срм-овского БП Поручение
Процедура УбратьВидимостьКомандыВводаНаОснованииЗадания(Форма) Экспорт 
	Для каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "ПараметрыПодключаемыхКоманд" Тогда
			Если 	ТипЗнч(Форма.ПараметрыПодключаемыхКоманд) = Тип("Структура") 
					И Форма.ПараметрыПодключаемыхКоманд.Свойство("АдресТаблицыКоманд") 
					И ЗначениеЗаполнено(Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд) Тогда
				ТаблицаПодключаемыхКоманд = ПолучитьИзВременногоХранилища(Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
				СтрокаЗадание = ТаблицаПодключаемыхКоманд.Найти("Задание", "Представление");
				СтрокаПоручение = ТаблицаПодключаемыхКоманд.Найти("Поручение (задание)", "Представление");
				Если СтрокаЗадание <> Неопределено И СтрокаПоручение <> Неопределено Тогда
					Форма.Элементы[СтрокаЗадание.ИмяВФорме].Видимость = Ложь;
				КонецЕсли;
				Прервать;	
			КонецЕсли;
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Функция ЕстьСвойствоОбъекта(Объект, ИмяСвойства) Экспорт
    ЕстьСвоство = Ложь;
    
    Структура = Новый Структура(ИмяСвойства, Неопределено);
    
    ЗаполнитьЗначенияСвойств(Структура, Объект);
    
    Если Структура[ИмяСвойства] = Неопределено Тогда
        Структура[ИмяСвойства] = Ложь;
        
        ЗаполнитьЗначенияСвойств(Структура, Объект);
        
        Если Структура[ИмяСвойства] <> Ложь Тогда
            ЕстьСвоство = Истина;
        КонецЕсли;
    Иначе
        ЕстьСвоство = Истина;
    КонецЕсли;
    
    Возврат ЕстьСвоство;
КонецФункции

#Область СКД

// 24.08.2021 Данилов Артур: AUTOOPT-1158
//
// Процедура - Копирует элементы отбора компоновки данных
//
// Параметры:
//  ОтборПриемник - ОтборКомпоновкиДанных - Отбор компоновки данных, в который будут скопированы элементы
//  ОтборИсточник - ОтборКомпоновкиДанных - Отбор компоновки данных, из которого копируются элементы
//
Процедура СкопироватьОтборыКомпоновкиДанных(ОтборПриемник, ОтборИсточник) Экспорт
	
	Для каждого ЭлементОтбора Из ОтборИсточник.Элементы Цикл
		ЭтоГруппа = ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
		НовыйЭлемент = ОтборПриемник.Элементы.Добавить(?(ЭтоГруппа, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"), Тип("ЭлементОтбораКомпоновкиДанных")));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
		Если ЭтоГруппа Тогда
			СкопироватьОтборыКомпоновкиДанных(НовыйЭлемент, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

//16.09.2021 Шакун Денис: AUTOOPT
Функция ПолучитьДополнительныеПодчиненныеСвязанныеОбъекты(ОсновнойОбъект) Экспорт
	ТаблицаПодчиненных = Новый ТаблицаЗначений;
	ТаблицаПодчиненных.Колонки.Добавить("Ссылка");
	
	Если ТипЗнч(ОсновнойОбъект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойОбъект,"МашинаОтгрузки");
		Если ЗначениеЗаполнено(РеквизитыОбъекта.МашинаОтгрузки) Тогда
			СтрокаПодчиненных = ТаблицаПодчиненных.Добавить();
			СтрокаПодчиненных.Ссылка = РеквизитыОбъекта.МашинаОтгрузки;
		КонецЕсли;
	КонецЕсли;

	// 13.05.2022 Леонов Александр: AUTOOPT-1865 - Входящие письма связаны с предметом через РС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", ОсновнойОбъект);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаимодействие КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	Предмет = &Предмет";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаПодчиненных = ТаблицаПодчиненных.Добавить();
		СтрокаПодчиненных.Ссылка = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат ТаблицаПодчиненных; 
КонецФункции

//16.09.2021 Шакун Денис: AUTOOPT-993
//Варианты представления списка:
//	- Формат(Дата, "ДЛФ=DT")
//	- Дата(1,1,1)
Функция ПолучитьДополнительныеРодительскиеСвязанныеОбъекты(ОсновнойОбъект) Экспорт
	СписокРодительских = Новый СписокЗначений;
	
	Если ТипЗнч(ОсновнойОбъект) = Тип("СправочникСсылка.ИТМ_МашиныОтгрузки") Тогда
		МетаданныеРодителя = Метаданные.Документы.ЗаказКлиента;
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРодителя) И ПравоДоступа("Чтение", МетаданныеРодителя) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МашинаОтгрузки",ОсновнойОбъект);
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка,
			|	Дата
			|ИЗ
			|	Документ.ЗаказКлиента
			|ГДЕ
			|	МашинаОтгрузки = &МашинаОтгрузки
			|";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокРодительских.Добавить(Выборка.Ссылка,Формат(Выборка.Дата, "ДЛФ=DT")); 	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	Возврат СписокРодительских;
КонецФункции        

//29.09.2021 Мурадян К.В. AUTOOPT-1262
 Функция ПолучитьСсылкуИзНавигационной(НавигационнаяСсылка) Экспорт
    
    ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
    ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
    
    ПредставлениеТипа   = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка + 5));
    Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
	Возврат Ссылка;
	
КонецФункции

// 25.10.2021 Берлизов Сергей. Нельзя просто так добавить дополнительно свойство ЭтоНовый по определению Источник.ЭтоНовый(),
// Потому что события ПередЗаписью могут вызываться повторно при записи объекта, например другими объектами, которые 
// записываются в подписках Перед записью исходного объекта. В результат если будем вставлять дополнительное свойство 
// ЭтоНовый по определению Источник.ЭтоНовый() при вротом обходе подписок ПередЗаписью, то вставим Ложь. И когда перейдем в 
// в подписки ПриЗаписи будем иметь допсвойство ЭтоНовый - Ложь
Функция ДобавитьДополнительноеСвойствоОбъектаЭтоНовый(Источник) Экспорт 
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		ЭтоНовый = Источник.ЭтоНовый();
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	КонецЕсли;	
КонецФункции

Функция ДобавитьУсловноеОформление(ФормаОбъекта, ПараметрыОформления, Отбор) экспорт
	
	ПолеОформления = СтрЗаменить(Отбор.ТЧ,"Объект.","");
	
	НовыйЭлемент = ФормаОбъекта.УсловноеОформление.Элементы.Добавить(); 
	Для Каждого Элемент Из ПараметрыОформления Цикл
		
		Если Элемент.Ключ="Поле" Тогда
			ПолеОформления = Элемент.Значение;
		Иначе
			НовыйЭлемент.Оформление.УстановитьЗначениеПараметра(Элемент.Ключ, Элемент.Значение);	
		КонецЕсли;	
		
	КонецЦикла;		
	НовыйЭлемент.Использование = Истина;
			
	ОформляемыеПоля = НовыйЭлемент.Поля.Элементы.Добавить();
	ОформляемыеПоля.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);
	
	ЭлементОтбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(Отбор.ТЧ+"."+Отбор.Поле);
	
	Если Отбор.Свойство("ВидСравнения") Тогда
		ЭлементОтбор.ВидСравнения  	= Отбор.ВидСравнения;
	Иначе	
		ЭлементОтбор.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбор.ПравоеЗначение = Отбор.Значение;	
	
	Возврат Новый Структура("Элемент, Отбор", ФормаОбъекта.УсловноеОформление.Элементы.Количество()-1, НовыйЭлемент.Отбор.Элементы.Количество()-1);
	
КонецФункции

// >> 13.02.2022 Леонов Александр

// 21.02.2022 Берлизов Сергей: AUTOOPT-
Процедура ДобавитьВОтборДинамическогоСпискаПометкуУдаленияЛожь(ДинамическийСписок, ИмяПоля = "ПометкаУдаления") Экспорт 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ДинамическийСписок,
		ИмяПоля,
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
КонецПроцедуры

//25.03.2022  Мурадян К.В. AUTOOPT-1753
Процедура ДополнитьТекстHTMLЗадачи(ТекстHTML) Экспорт
	
	// 19.11.2021 Данилов Артур: AUTOOPT-1413
	УстановитьПривилегированныйРежим(Истина);
	
	//<< 13.09.2021 Мурадян К.В. AUTOOPT-1262
	//GUID в гиперссылку
	Пока СтрНайти(ТекстHTML,"GUID") > 0 Цикл 
		
		НомерНачало 	= СтрНайти(ТекстHTML,"GUID");
		пСтрокаПолная	= Сред(ТекстHTML,НомерНачало,40);
		GUID 			= Новый УникальныйИдентификатор(Сред(ТекстHTML,НомерНачало+4,36));		
		
		пСсылка = Документы.ЗаказКлиента.ПолучитьСсылку(GUID);
		Если НЕ ЗначениеЗаполнено(пСсылка.Дата) Тогда
			ТекстHTML = СтрЗаменить(ТекстHTML,пСтрокаПолная,"");
			Продолжить;
		КонецЕсли;	
		
		пСсылкаП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(пСсылка,"Представление");
		пНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(пСсылка);
		
		пЗаменяющаяСтрока = "<A id="""""" href= """ + пНавигационнаяСсылка + """ >" + пСсылкаП + "</A>";
		ТекстHTML = СтрЗаменить(ТекстHTML,пСтрокаПолная,пЗаменяющаяСтрока);
		
	КонецЦикла;
	
	//Гиперссылки
	Пока СтрНайти(ТекстHTML,"n|") > 0 Цикл		
		gI = СтрНайти(ТекстHTML,"n|");
		Ig = СтрНайти(ТекстHTML,"|n");   
		пЗаменяемаяСтрока = Сред(ТекстHTML,gI,(Ig+2)-gI);   
		Гиперссылка = Сред(ТекстHTML,gI+2,(Ig-2)-gI);   
		
		пСсылка = ИТМ_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(Гиперссылка);	
		пСсылкаП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(пСсылка,"Представление");
		
		//Заменяем строку в поле HTML
		пЗаменяющаяСтрока = "<A id="""""" href= """ + Гиперссылка + """ >" + пСсылкаП + "</A>";
		ТекстHTML = СтрЗаменить(ТекстHTML,пЗаменяемаяСтрока,пЗаменяющаяСтрока);			
	КонецЦикла;
	  //>>13.09.2021 Мурадян К.В. AUTOOPT-1262

 КонецПроцедуры

 //27.05.2022 Шакун Денис: AUTOOPT-1959
Процедура ДобавитьКнопкуСправка(Форма, Действие = "",Группа = "ФормаКоманднаяПанель") Экспорт
	КомандаСправка = ИТМ_ОбщегоНазначенияСервер.ДобавитьКоманду(Форма,"ОткрытьСправкуФормы",Действие,Ложь);
	ЭлементОткрытьСправку = ИТМ_ОбщегоНазначенияСервер.ДобавитьКнопку(Форма,"ОткрытьСправкуФормы","ОткрытьСправкуФормы",Группа,"Справка");
	ЭлементОткрытьСправку.Картинка = БиблиотекаКартинок.Вопрос32;
	ЭлементОткрытьСправку.Отображение = ОтображениеКнопки.Картинка;
	ЭлементОткрытьСправку.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
КонецПроцедуры

//22.06.2022 Шакун Денис: AUTOOPT-1963
Функция ДобавитьКнопкуВсеРеквизиты(Форма,Группа) Экспорт
	ИмяКоманды = "ОткрытьВсеРеквизиты";
	ИТМ_ОбщегоНазначенияСервер.ДобавитьКоманду(Форма, ИмяКоманды);
	Элемент = ИТМ_ОбщегоНазначенияСервер.ДобавитьКнопку(Форма, ИмяКоманды, ИмяКоманды, Группа, "Все реквизиты");
	Элемент.Картинка = БиблиотекаКартинок.Отчет;
		
	Возврат Элемент;
КонецФункции
