#Область ПрограммныйИнтерфейс

Функция КоличествоЗаписейРегистраНастройкиТеста(НастройкиТестов) Экспорт 

	Если ТипЗнч(НастройкиТестов) = Тип("Массив") Тогда
		
		Массив =  НастройкиТестов;
		
	Иначе
		
		Массив = Новый Массив();
		Массив.Добавить(НастройкиТестов);
				
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкаТеста КАК НастройкаТеста,   
	|	СУММА(КоличествоДанных) КАК КоличествоДанных,
	|	СУММА(КоличествоОшибок) КАК КоличествоОшибок,
	|	СУММА(КоличествоВременныхТаблицы) КАК КоличествоВременныхТаблицы
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкаТеста КАК НастройкаТеста,   
	|		КОЛИЧЕСТВО(*) КАК КоличествоДанных,
	|		0 КАК КоличествоОшибок,
	|		0 КАК КоличествоВременныхТаблицы
	|	ИЗ
	|  		РегистрСведений.РезультатыВыполненияЗапросов
	|	ГДЕ
	|		НастройкаТеста В (&НастройкиТестов)
	|	СГРУППИРОВАТЬ ПО
	|		НастройкаТеста
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НастройкаТеста КАК НастройкаТеста,   
	|		0 КАК КоличествоДанных,
	|		КОЛИЧЕСТВО(*) КАК КоличествоОшибок,
	|		0 КАК КоличествоВременныхТаблицы
	|	ИЗ
	|  		РегистрСведений.РезультатыВыполненияЗапросов
	|	ГДЕ
	|		НастройкаТеста В (&НастройкиТестов)
	|		И ВидОшибки <> ЗНАЧЕНИЕ(Перечисление.ВидыОшибокЗапросов.ПустаяСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		НастройкаТеста
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НастройкаТеста КАК НастройкаТеста,   
	|		0 КАК КоличествоДанных,
	|		0 КАК КоличествоОшибок,
	|		КОЛИЧЕСТВО(*) КАК КоличествоВременныхТаблицы
	|	ИЗ
	|  		РегистрСведений.ВременныеТаблицыPostgres
	|	ГДЕ
	|		НастройкаТеста В (&НастройкиТестов)
	|	СГРУППИРОВАТЬ ПО
	|		НастройкаТеста
	|	) КАК Вл
	|СГРУППИРОВАТЬ ПО
	|	НастройкаТеста
	|";
	
	Запрос.УстановитьПараметр("НастройкиТестов", Массив);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("НастройкаТеста,КоличествоДанных,КоличествоОшибок,КоличествоВременныхТаблицы");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		Результат.Добавить(Структура);
	КонецЦикла;                       
	
	Возврат Результат;
	
КонецФункции

Функция ТекстСтатистикиЭкземпляра(ДанныеСтатистики) Экспорт 
	
	Если ЗначениеЗаполнено(ДанныеСтатистики) Тогда
		Результат = СтрШаблон("Записей %1, ошибок %2, ВТ %3", Формат(ДанныеСтатистики[0].КоличествоДанных, "ЧН=0"), Формат(ДанныеСтатистики[0].КоличествоОшибок, "ЧН=0"), Формат(ДанныеСтатистики[0].КоличествоВременныхТаблицы, "ЧН=0"));
	Иначе
		Результат = "";
	КонецЕсли;         
	
	Возврат Результат;

КонецФункции

// Обновляет поля статистики формы - количество записей в РС УстановитьОшибкуПреобразования и длительности операций
Процедура ОбновитьДанныеСтатистики(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;  
	
	ДанныеСтатистики = НастройкаТестовСервер.КоличествоЗаписейРегистраНастройкиТеста(Объект.Ссылка);
	Форма.ТекстСтатистики = НастройкаТестовСервер.ТекстСтатистикиЭкземпляра(ДанныеСтатистики);
	
	Изменено = Ложь;
	Длительность = ЭтапОбработки(Объект.Ссылка, Перечисления.ВидыЭтаповОбработки.ЗагрузкаДанных).Длительность;
	Если Объект.ДлительностьЗагрузки <> Длительность Тогда
		Объект.ДлительностьЗагрузки = Длительность;
		Изменено = Истина;
	КонецЕсли;
	Длительность = ЭтапОбработки(Объект.Ссылка, Перечисления.ВидыЭтаповОбработки.СозданиеВременныхТаблиц).Длительность 
		+ ЭтапОбработки(Объект.Ссылка, Перечисления.ВидыЭтаповОбработки.УстановкаСвязанныхЗапросов).Длительность 
		+ ЭтапОбработки(Объект.Ссылка, Перечисления.ВидыЭтаповОбработки.СозданиеТекстовЗапросов).Длительность;
	Если Объект.ДлительностьПреобразования <> Длительность Тогда
		Объект.ДлительностьПреобразования = Длительность;
		Изменено = Истина;
	КонецЕсли;
	Длительность = ЭтапОбработки(Объект.Ссылка, Перечисления.ВидыЭтаповОбработки.ВыполнениеЗапросов).Длительность;
	Если Объект.ДлительностьВыполнения <> Длительность Тогда
		Объект.ДлительностьВыполнения = Длительность;
		Изменено = Истина;
	КонецЕсли;

	Если Изменено Тогда
		Форма.Записать();	
	КонецЕсли;            
	
	Если Объект.ДлительностьЗагрузки + Объект.ДлительностьПреобразования + Объект.ДлительностьВыполнения > 0 Тогда
		Форма.ТекстДлительности = СтрШаблон("Длительности, сек: Загрузки %1, Преобразования %2, Выполнения %3", Объект.ДлительностьЗагрузки, Объект.ДлительностьПреобразования, Объект.ДлительностьВыполнения);	
	КонецЕсли;	                                                                                                                                                                                         
	
КонецПроцедуры

Процедура СоздатьЭтапыОбработки(НастройкаТеста) Экспорт 

	НаборЗаписей = РегистрыСведений.ЭтапыОбработкиДанных.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.НастройкаТеста.Установить(НастройкаТеста);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Перечисления.ВидыЭтаповОбработки.ЗагрузкаДанных);
		Массив.Добавить(Перечисления.ВидыЭтаповОбработки.ВыполнениеЗапросов);
		Массив.Добавить(Перечисления.ВидыЭтаповОбработки.СозданиеТекстовЗапросов);
		Массив.Добавить(Перечисления.ВидыЭтаповОбработки.СозданиеВременныхТаблиц);
		
		Для каждого Этап Из Массив Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.НастройкаТеста = НастройкаТеста;
			НоваяЗапись.ЭтапОбработки = Этап;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеРегистровНастройкиТеста(НастройкаТеста, Вариант = 1) Экспорт 
	
	Массив = Новый Массив();
	Если (Вариант = 1 Или Вариант = 2) Тогда
		
		Массив.Добавить("РезультатыВыполненияЗапросов");
		Массив.Добавить("ЭтапыОбработкиДанных");
		
	КонецЕсли;
	
	Если Вариант = 1 Или Вариант = 3 Тогда	
		
		Массив.Добавить("ВременныеТаблицы");
		
	КонецЕсли;
	
	Если Вариант = 1 Или Вариант = 4 Тогда	
		
		Массив.Добавить("ВременныеТаблицыPostgres");
		Массив.Добавить("ПоляВременныхТаблицыPostgres");
		Массив.Добавить("НаполненияВременныхТаблицPostgres");
		Массив.Добавить("КолонкиВТПодготовленныхОператоров");
		Массив.Добавить("ИменаВТПодготовленныхОператоров");
		
	КонецЕсли;
	
	Для каждого РС Из Массив Цикл
		
		НаборЗаписей = РегистрыСведений[РС].СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.НастройкаТеста.Установить(НастройкаТеста);
		НаборЗаписей.Записать(); 
		
	КонецЦикла;
	
	Если (Вариант = 1 Или Вариант = 2) Тогда
		
		СоздатьЭтапыОбработки(НастройкаТеста);	
		
	КонецЕсли;
	

КонецПроцедуры

Функция СообщитьДлительностьОперации(Знач НастройкаТеста, Знач Описание, Знач ДатаНачала, Знач ПараметрыЗаписиЭтапа = Неопределено) Экспорт 
	
	ДатаОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = Окр((ДатаОкончания - ДатаНачала) / 1000, 0);
	Результат = СтрШаблон("%1 составила %2 сек.", Описание, Длительность);
	ОбщегоНазначения.СообщитьПользователю(Результат);

	Если ПараметрыЗаписиЭтапа <> Неопределено Тогда
		
		МенеджерЭтапаОбработки = МенеджерЭтапаОбработки(НастройкаТеста, ПараметрыЗаписиЭтапа.ЭтапОбработки);
		ЗаполнитьЗначенияСвойств(МенеджерЭтапаОбработки, ПараметрыЗаписиЭтапа);
		МенеджерЭтапаОбработки.Длительность = МенеджерЭтапаОбработки.Длительность + Длительность;
		МенеджерЭтапаОбработки.Записать();
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку ТЧ ЭтапыОбработкиДанных с требуемым этапом
Функция ЭтапОбработки(НастройкаТеста, ЭтапОбработки, НастройкиИтераций = Неопределено) Экспорт 
	
	Результат = Новый Структура("НастройкаТеста,ЭтапОбработки,Завершен,ТекущаяДатаСобытия,ТекущееID,НомерИтерации,Длительность");
	МенеджерЭтапаОбработки = МенеджерЭтапаОбработки(НастройкаТеста, ЭтапОбработки);
	МенеджерЭтапаОбработки.Прочитать();
	ЗаполнитьЗначенияСвойств(Результат, МенеджерЭтапаОбработки); 
	
	Если ЗначениеЗаполнено(НастройкиИтераций) Тогда
		
		Если НЕ ЗначениеЗаполнено(Результат.ТекущаяДатаСобытия) Тогда
			Результат.ТекущаяДатаСобытия = НастройкиИтераций.ДатаМинимум-1;
		КонецЕсли;
		
		Результат.НомерИтерации = НастройкаТестовСервер.НомерТекущийИтерации(НастройкиИтераций, Результат.ТекущаяДатаСобытия);// + 1;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Режим = 1 - Только текст запроса, 2 - С текстом создания необходимых ВТ, 3 - С текстом создания и с заполнением создаваемых ВТ - ПОКА НЕ СДЕЛАЛ
Функция СформироватьТекстЗапроса(НастройкаТеста,ДатаСобытия, НомерСессии,НомерСобытия,Режим = 2) Экспорт 

	Запись = ДанныеИзРезультатовВыполненияЗапросов(
		НастройкаТеста,
		ДатаСобытия, 
		НомерСессии,
		НомерСобытия,
		1,
		"ТекстЗапросаPostgres,НомерСессии");
	
	ТекстЗапроса = "";
	Если Режим > 1 Тогда
		
		Результат = СтрНайтиВсеПоРегулярномуВыражению(Запись.ТекстЗапросаPostgres, "pg_temp\.(tt\d+)\b");
		Количество = Результат.Количество();	
		Для Сч = 1 По Количество Цикл
			
			ИмяТаблицы = Результат[Количество - Сч].ПолучитьГруппы()[0].Значение;
			
			Если СтрНайти(ТекстЗапроса, ИмяТаблицы) > 0 Тогда
				Продолжить;
			КонецЕсли;     
			
			ВременныеТаблицыPostgres = НастройкаТестов_СозданиеВременныхТаблиц.ВременныеТаблицыPostgres(
				НастройкаТеста,
				"СкриптСоздания,ДатаСоздания,НомерСобытия",
				"НомерСессии = &НомерСессии И ИмяТаблицы = &ИмяТаблицы",
				Новый Структура("НомерСессии,ИмяТаблицы" ,НомерСессии,ИмяТаблицы));
				
			СтрокаСозданияСкрипта = Неопределено;
			Для каждого Строка Из ВременныеТаблицыPostgres Цикл
				
				Если Строка.ДатаСоздания = ДатаСобытия И Строка.НомерСобытия = НомерСобытия Тогда
					СтрокаСозданияСкрипта = Строка;
					Прервать;
				ИначеЕсли Строка.ДатаСоздания > ДатаСобытия Тогда
					Если СтрокаСозданияСкрипта = Неопределено Тогда
						СтрокаСозданияСкрипта = Строка;
					КонецЕсли;
					Прервать;	
				КонецЕсли;	
				
				СтрокаСозданияСкрипта = Строка;
							
			КонецЦикла;
			
			ТекстЗапроса = СтрШаблон("%1%2%3", 
				ТекстЗапроса, 
				?(ЗначениеЗаполнено(ТекстЗапроса), СтрШаблон("%1;%1", Символы.ПС), ""),
				?(ЗначениеЗаполнено(СтрокаСозданияСкрипта) И ЗначениеЗаполнено(СтрокаСозданияСкрипта.СкриптСоздания), СтрокаСозданияСкрипта.СкриптСоздания, СтрШаблон("Нет скрипа создания ВТ %1", ИмяТаблицы))
				);
				
		КонецЦикла;
			
	КонецЕсли; 
	
	ТекстЗапроса = СтрШаблон("%1%2%3",
		ТекстЗапроса,
		?(ЗначениеЗаполнено(ТекстЗапроса), СтрШаблон("%1;%1", Символы.ПС), ""),
		Запись.ТекстЗапросаPostgres);

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УдалениеДанныхСОтборомФон(Параметры, АдресХранилища) Экспорт 

	Результат = УдалениеДанныхСОтбором(Параметры.НастройкаТеста, Параметры.Настройки);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция УдалениеДанныхСОтбором(НастройкаТеста, Настройки) Экспорт 
	
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
	
	// Общие итоги
	ДлительныеОперации.СообщитьПрогресс(, "Подсчет количества удаляемых значений");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных; 
	СхемаКомпоновкиДанных = Справочники.НастройкаТеста.ПолучитьМакет("МакетИтоги");

	Настройки.Структура.Очистить();
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));           
	ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Заголовок     = "";
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Количество");
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Выполняем схему компоновки.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаДанных = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	КоличествоИТОГО = ТаблицаДанных[0].Количество;
	
	// Непосредственное удаление
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных; 
	СхемаКомпоновкиДанных = Справочники.НастройкаТеста.ПолучитьМакет("Макет");
	
	// Добавляем группировку.
	Настройки.Структура.Очистить();
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));           
	Поля = Новый Массив;
	Поля.Добавить("НастройкаТеста");
	Поля.Добавить("ДатаСобытия"); 
	Поля.Добавить("НомерСессии");
	Поля.Добавить("НомерСобытия"); 
	Для каждого Поле Из Поля Цикл
		
		ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок     = Поле;
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
		
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Выполняем схему компоновки.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	Шагов = Цел(КоличествоИТОГО / 10000) + 1;
	Шаг = 1;
	Пока Истина Цикл 
		ДлительныеОперации.СообщитьПрогресс(, СтрШаблон("Удаление данных с отбором. Этап %1 из %2", Шаг, Шагов));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(Макет);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТаблицаДанных = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		Если ТаблицаДанных.Количество() = 0 Тогда
			Прервать;	
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл МенеджерРегистра = РегистрыСведений.РезультатыВыполненияЗапросов.СоздатьМенеджерЗаписи(); ЗаполнитьЗначенияСвойств(МенеджерРегистра, СтрокаТаблицы); МенеджерРегистра.Удалить(); КонецЦикла; 
		Шаг = Шаг + 1;
    КонецЦикла;

	СообщитьДлительностьОперации(НастройкаТеста,СтрШаблон("Удаление %1 элементов данных по отбору", Шаг), ДатаНачала);
	
	Возврат Истина;
	
КонецФункции

// 
Функция ПолучитьПараметрыФункции(ИмяФункции, Знач ТекстЗапроса, Направление = Неопределено, НачальнаяПозиция = Неопределено) Экспорт 
	
	Если Направление = Неопределено Тогда
		Направление = НаправлениеПоиска.СКонца;	
	КонецЕсли;
	Если НачальнаяПозиция = Неопределено Тогда
		Если Направление = НаправлениеПоиска.СКонца Тогда
			НачальнаяПозиция = СтрДлина(ТекстЗапроса);
		Иначе
			НачальнаяПозиция = 1;
		КонецЕсли;	
	КонецЕсли;
	
	Результат = Неопределено;
	
	ПозНач = СтрНайти(ТекстЗапроса, СтрШаблон("%1(", ИмяФункции), Направление, НачальнаяПозиция);
	Если ПозНач > 0 Тогда
		
		Сч = ПозНач + СтрДлина(ИмяФункции) + 1;
		КолОтр = 1;
		КолЗакр = 0;
		НачПар = Сч;
		Результат = Новый Структура;
		Результат.Вставить("Параметры", Новый Соответствие);
		НомерПараметра = 1;
		Пока Истина Цикл
			
			// Если дошли до последней скобки - закрывающей функцию, то прерываетм
			Если КолОтр = КолЗакр Тогда
				Прервать;
			КонецЕсли;
			
			ТекСимвол = Сред(ТекстЗапроса, Сч, 1);
			Если ТекСимвол = ")" Тогда
				
				КолЗакр = КолЗакр + 1;
				
			ИначеЕсли ТекСимвол = "(" Тогда
				
				КолОтр = КолОтр + 1;
				
			ИначеЕсли ТекСимвол = "," И КолОтр = КолЗакр + 1 Тогда	
				
				СтруктураПараметр = Новый Структура;
				Параметр = Сред(ТекстЗапроса, НачПар, Сч - НачПар);
				СтруктураПараметр.Вставить("Текст", Параметр);
				СтруктураПараметр.Вставить("Начало", НачПар);
				Результат.Параметры.Вставить(НомерПараметра, СтруктураПараметр);
				НачПар = Сч + 1;
				НомерПараметра = НомерПараметра + 1;
				
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
		// Последний параметр		
		СтруктураПараметр = Новый Структура;
		Параметр = Сред(ТекстЗапроса, НачПар, Сч - НачПар - 1);
		СтруктураПараметр.Вставить("Текст", Параметр);
		СтруктураПараметр.Вставить("Начало", НачПар);
		Результат.Параметры.Вставить(НомерПараметра, СтруктураПараметр);
		
		// Полный текст функции
		Текст = Сред(ТекстЗапроса, ПозНач, Сч - ПозНач);
		Результат.Вставить("Текст", Текст);
		Результат.Вставить("Начало", ПозНач);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ДанныеСобытияДляСсылкиOpensearch(НомерСобытия, НастройкаТеста) Экспорт
	
	Результат = Новый Структура("НомерСессии, ДатаСобытия, ИмяБазыСнятияЛогов, СсылкаOpenSearch, ИдентификаторПатернаOpenSearch");
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НастройкаТеста", НастройкаТеста);
	Запрос.УстановитьПараметр("НомерСобытия", НомерСобытия);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Рез.НомерСессии КАК НомерСессии,
	|	ДОБАВИТЬКДАТЕ(Рез.ДатаСобытия, Час, -3) КАК ДатаСобытия,
	|	Рез.НастройкаТеста.ИмяБазыСнятияЛогов КАК ИмяБазыСнятияЛогов
	|ИЗ
	|	РегистрСведений.РезультатыВыполненияЗапросов КАК Рез
	|ГДЕ
	|	Рез.НастройкаТеста = &НастройкаТеста
	|	И Рез.НомерСобытия = &НомерСобытия
	|;
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
	КонецЦикла;
	
	Результат.СсылкаOpenSearch = Константы.СсылкаOpenSearch.Получить();
	Результат.ИдентификаторПатернаOpenSearch = Константы.ИдентификаторПатернаOpenSearch.Получить();

	Возврат Результат;
	
КонецФункции


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции 

Функция ДанныеИзРезультатовВыполненияЗапросов(	НастройкаТеста,
												ДатаСобытия = Неопределено, 
												НомерСессии = Неопределено,
												НомерСобытия = Неопределено,
												Первые = 0,
												Поля = "*", 
												Отборы = "", 
												Параметры = Неопределено,
												Порядок = "") Экспорт 

	РезультатЗапроса = РезультатЗапросаРСРезультатыВыполнения(	
		НастройкаТеста,
		ДатаСобытия, 
		НомерСессии,
		НомерСобытия,
		Первые,
		Поля, 
		Отборы, 
		Параметры,
		Порядок);

    Если Первые = 1 Тогда
		
		Если Поля = "*" Тогда
			Поля = "";
			Для каждого Поле Из Метаданные.РегистрыСведений.РезультатыВыполненияЗапросов.Измерения Цикл
				Поля = СтрШаблон("%1%2,", Поля, Поле.Имя);	
			КонецЦикла;
			Для каждого Поле Из Метаданные.РегистрыСведений.РезультатыВыполненияЗапросов.Ресурсы Цикл
				Поля = СтрШаблон("%1%2,", Поля, Поле.Имя);	
			КонецЦикла;
			Поля = Лев(Поля, СтрДлина(Поля) - 1);
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Новый Структура(Поля);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
	Иначе
		
		Результат = РезультатЗапроса.Выгрузить();
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция РезультатЗапросаРСРезультатыВыполнения(	НастройкаТеста,
												ДатаСобытия = Неопределено, 
												НомерСессии = Неопределено,
												НомерСобытия = Неопределено,
												Первые = 0,
												Знач Поля = "*", 
												Отборы = "", 
												Параметры = Неопределено,
												Порядок = "") Экспорт      
												
	Если Не ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;	
	КонецЕсли;
	Параметры.Вставить("НастройкаТеста", НастройкаТеста);
	
	Если ЗначениеЗаполнено(ДатаСобытия) Тогда
		
		Отборы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2 ДатаСобытия = &ДатаСобытия",
			Отборы,
			?(ПустаяСтрока(Отборы), "", " И"));
		Параметры.Вставить("ДатаСобытия", ДатаСобытия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСессии) Тогда
		
		Отборы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2 НомерСессии = &НомерСессии",
			Отборы,
			?(ПустаяСтрока(Отборы), "", " И"));
		Параметры.Вставить("НомерСессии", НомерСессии);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСессии) Тогда
		
		Отборы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2 НомерСобытия = &НомерСобытия",
			Отборы,
			?(ПустаяСтрока(Отборы), "", " И"));
		Параметры.Вставить("НомерСобытия", НомерСобытия);
		
	КонецЕсли;
	
	Отборы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1%2 НастройкаТеста = &НастройкаТеста",
		Отборы,
		?(ПустаяСтрока(Отборы), "", " И"));

	РезультатЗапроса = ИТМ_ОбщегоНазначенияСервер.ПолучитьРезультатЗапросаПоТаблице(
		"РегистрСведений.РезультатыВыполненияЗапросов",
		Первые,,,
		Поля,
		Отборы,
		Параметры,
		Порядок);

	Возврат РезультатЗапроса;
												
КонецФункции

Процедура ОчиститьЭтапОбработки(НастройкаТеста, ЭтапОбработки) Экспорт 
	
	МенеджерЭтапаОбработки = МенеджерЭтапаОбработки(НастройкаТеста, ЭтапОбработки);
	МенеджерЭтапаОбработки.Завершен				= ЛОжь;
	МенеджерЭтапаОбработки.ТекущаяДатаСобытия 	= Неопределено;
	МенеджерЭтапаОбработки.ТекущееID 			= Неопределено;
	МенеджерЭтапаОбработки.НомерИтерации 		= Неопределено;
	МенеджерЭтапаОбработки.Длительность 		= Неопределено;
	МенеджерЭтапаОбработки.Записать();
	
КонецПроцедуры

Функция МенеджерЭтапаОбработки(НастройкаТеста, ЭтапОбработки)

	МенеджерРегистра = РегистрыСведений.ЭтапыОбработкиДанных.СоздатьМенеджерЗаписи();
	МенеджерРегистра.НастройкаТеста = НастройкаТеста;
	МенеджерРегистра.ЭтапОбработки = ЭтапОбработки;
	
	Возврат МенеджерРегистра;
	
КонецФункции

// Загружает данные в нужный РС
Процедура ЗагрузитьДанныеВРегистр(НастройкаТеста, ТаблицаРегистра, ОчиститьСтарыеЗаписи = Истина) Экспорт 
	
	ТаблицаРегистра.ЗаполнитьЗначения(НастройкаТеста, "НастройкаТеста");
	Если ОчиститьСтарыеЗаписи Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРегистра Цикл МенеджерРегистра = РегистрыСведений.РезультатыВыполненияЗапросов.СоздатьМенеджерЗаписи();	ЗаполнитьЗначенияСвойств(МенеджерРегистра, СтрокаТаблицы, "НастройкаТеста,ДатаСобытия,НомерСессии,НомерСобытия"); МенеджерРегистра.Удалить();КонецЦикла;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.РезультатыВыполненияЗапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ТаблицаРегистра);
	НаборЗаписей.Отбор.НастройкаТеста.Установить(НастройкаТеста);
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

// Заготовка для возвртата резульатта выполнения ФЗ
Функция РезультатВыполненияФоновогоЗаданияЭтапа() Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапЗавершен", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Результат", "");
	Результат.Вставить("ОшибкаВыполнения", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса MSSQL, без exec sp_executesql N' и параметров запроса
Функция ТекстЗапросаMSSQL(Знач ТекстЗапроса, ВерхнийРегистр = Ложь)	Экспорт
	
	СтрокаПоиска = ?(ВерхнийРегистр, "exec sp_executesql N'", "exec sp_executesql n'");
	СтрокаРазделитель = ?(ВерхнийРегистр, "',N'", "',n'");
	Если СтрНайти(ТекстЗапроса, СтрокаПоиска) > 0 Тогда

		ПозНач = СтрДлина(СтрокаПоиска) + 1;
		ПозКон = СтрНайти(ТекстЗапроса,СтрокаРазделитель,,ПозНач,1);
		ТекстЗапроса = Сред(ТекстЗапроса, ПозНач, ПозКон - ПозНач);
		
	КонецЕсли; 

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СообщитьПрогрессаЭтапа(ТекстСообщения, ЗаголовокСообщения = "", Процент = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(ЗаголовокСообщения) Тогда
		Текст = СтрШаблон("%1%2%3", ЗаголовокСообщения, Символы.ПС, ТекстСообщения);
	Иначе
		Текст = ТекстСообщения;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(Процент, Текст);

КонецПроцедуры

// Заготовка под возможные отборы для получения таблицы результатов
Функция ОтборыТаблицыРезультатов() Экспорт 
	
	Результат = Новый Структура("ЭтапОбработки,ПараметрыТеста,ИсключитьВидОшибок,ИсключитьВидыСобытий,ТолькоВидыСобытий,ОтборПоСессиям");
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу значений из РС РезультатыВыполненияЗапросов с установкой необходимых отборов - т.е тех записей которые не будут меняться
Функция ТаблицаРезультатов(НастройкаТеста, ДопТаблицы) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкаТеста КАК НастройкаТеста,
	|	НомерСессии КАК НомерСессии,
	|	НомерСобытия КАК НомерСобытия,
	|	ДатаСобытия КАК ДатаСобытия,
	|	ВидСобытия КАК ВидСобытия,
	|	ТекстЗапросаMSSQL КАК ТекстЗапросаMSSQL,
	|	КоличествоСтрокMSSQL КАК КоличествоСтрокMSSQL,
	|	ДлительностьВыполненияMSSQL КАК ДлительностьВыполненияMSSQL,
	|	ТекстЗапросаPostgres КАК ТекстЗапросаPostgres,
	|	КоличествоСтрокPostgres КАК КоличествоСтрокPostgres,
	|	ДлительностьВыполненияPostgres КАК ДлительностьВыполненияPostgres,
	|	ВидОшибки КАК ВидОшибки,
	|	ОшибкаПриВыполнения КАК ОшибкаПриВыполнения,
	|	ОшибкаПреобразования КАК ОшибкаПреобразования,
	|	ТекстОшибки КАК ТекстОшибки
	|ИЗ
	|	РегистрСведений.РезультатыВыполненияЗапросов КАК РезультатыВыполненияЗапросов
	|ГДЕ
	|	НастройкаТеста = &НастройкаТеста
	|	//%ДатаСобытия%
	|	//%ВидыОшибок%
	|	//%ИсключитьВидыСобытий%
	|	//%ТолькоВидыСобытий%
	|	//%ОтборПоСессиям%
	|УПОРЯДОЧИТЬ ПО
	|	НастройкаТеста,
	|	ДатаСобытия,
	|	НомерСессии,
	|	НомерСобытия
	|";
	
	Таблица = ТаблицаРезультатовПоЗапросу(Запрос, НастройкаТеста, ДопТаблицы);
	Таблица.ЗаполнитьЗначения("", "ТекстОшибки"); 
	
	Возврат Таблица;
	
КонецФункции 

Функция СессииПоПотокамТаблицыРезультатов(НастройкаТеста, ДопТаблицы) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСессии КАК НомерСессии,
	|	СУММА(1) КАК Количество,
	|	МАКСИМУМ(ДатаСобытия) КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.РезультатыВыполненияЗапросов КАК РезультатыВыполненияЗапросов
	|ГДЕ
	|	НастройкаТеста = &НастройкаТеста
	|	//%ДатаСобытия%
	|	//%ВидыОшибок%
	|	//%ИсключитьВидыСобытий%
	|	//%ТолькоВидыСобытий%
	|	//%ОтборПоСессиям%
	|СГРУППИРОВАТЬ ПО
	|	НомерСессии	
	|УПОРЯДОЧИТЬ ПО
	|	СУММА(1) УБЫВ
	|";
	
	ДопТаблицы.Отборы.ОтборПоСессиям = Неопределено;
	Таблица = ТаблицаРезультатовПоЗапросу(Запрос, НастройкаТеста, ДопТаблицы);
	
	Потоки = Новый Соответствие;
	Для Сч = 1 По ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("КоличествоПотоковФоновыхЗаданий", Ложь) Цикл
		Структура = Новый Структура;
		Структура.Вставить("НомераСессий", 	Новый Массив); 
		Структура.Вставить("Количество", 	0); 
		Структура.Вставить("ДатаСобытия", '00010101'); 
		Потоки.Вставить(Сч, Структура);
	КонецЦикла;
	
	// Равномерно распределим номера сессий по количеству событий по потокам
	Для каждого СтрокаТаб Из Таблица Цикл
		
		СчМин = 1;
		Для Сч = 1 По ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("КоличествоПотоковФоновыхЗаданий", Ложь) Цикл
			Если Потоки[Сч].Количество < Потоки[СчМин].Количество Тогда
				СчМин = Сч;	
			КонецЕсли;		
		КонецЦикла;
		Потоки[СчМин].Количество = Потоки[СчМин].Количество + СтрокаТаб.Количество;
		Потоки[СчМин].НомераСессий.Добавить(СтрокаТаб.НомерСессии);
		Если Потоки[СчМин].ДатаСобытия < СтрокаТаб.ДатаСобытия Тогда
			Потоки[СчМин].ДатаСобытия = СтрокаТаб.ДатаСобытия;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если вдруг есть потоки потоки, то удалим их
	Для Сч = 1 По ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("КоличествоПотоковФоновыхЗаданий", Ложь) Цикл
		
		Инд = ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("КоличествоПотоковФоновыхЗаданий", Ложь) - Сч + 1;
		Если Потоки[Инд].Количество = 0 Тогда
			Потоки.Удалить(Инд);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Потоки;
	
КонецФункции

Функция Многопоточность() Экспорт 
	
	Результат = НЕ ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ОбработкаБезФоновыхЗаданий", Ложь) 
				И ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("КоличествоПотоковФоновыхЗаданий", Ложь) > 1
				И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Возврат Результат;
	
КонецФункции

Функция СоздатьЗапуститьПотоки(НастройкаТеста, Результат, ДопТаблицы) Экспорт 
	
	СообщитьПрогрессаЭтапа("Разбивка по потокам", ДопТаблицы.ЗаголовокСообщения); 
	Потоки = СессииПоПотокамТаблицыРезультатов(НастройкаТеста, ДопТаблицы);
	// массив, где будут храниться фоновые задания
    МассивЗаданий = Новый Массив;
	
	Для каждого КиЗ Из Потоки Цикл
		
       // определяем массив параметров для процедуры
        НаборПараметров = Новый Массив;
        НаборПараметров.Добавить(НастройкаТеста);
		ДопТаблицы.Отборы.ОтборПоСессиям = КиЗ.Значение.НомераСессий;
		
        НаборПараметров.Добавить(Неопределено);
        НаборПараметров.Добавить(ДопТаблицы);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();

 		ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполнения,
			ДопТаблицы.Метод,
			НастройкаТеста,
			Неопределено,
			ДопТаблицы
			);		

		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ДлительнаяОперация.ИдентификаторЗадания);
			МассивЗаданий.Добавить(Задание);
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			НастройкаТестовСервер.СообщитьОшибку(НастройкаТеста, ДопТаблицы.ПодразделЖР, ДлительнаяОперация, Результат, МассивЗаданий);
			Прервать;
		КонецЕсли;	
		
		// Опеределяем, что этап завершается
		Если ДопТаблицы.НастройкиИтераций.ДатаМаксимум = КиЗ.Значение.ДатаСобытия Тогда
			ДопТаблицы.ЭтапОбработки.Завершен = Истина;	
		КонецЕсли;
		
	КонецЦикла; 

	Возврат МассивЗаданий;
	
КонецФункции

Процедура ВыполнитьИтерациюЭтапа(НастройкаТеста, ДопТаблицы, Результат) Экспорт 
			
	Если ДопТаблицы.Многопоточность Тогда
		
		РезультатОжиданияВыполненияПотоков(НастройкаТеста, Результат, ДопТаблицы);
		Если Результат.ОшибкаВыполнения Тогда
			Возврат;	
		КонецЕсли;
		
	Иначе
		
		СообщитьПрогрессаЭтапа("Подготовка данных", ДопТаблицы.ЗаголовокСообщения);
		ТаблицаРезультатов = ТаблицаРезультатов(НастройкаТеста, ДопТаблицы);				
		ДопТаблицы.ЭтапОбработки.Завершен = ДопТаблицы.НастройкиИтераций.ДатаМаксимум = ТаблицаРезультатов[ТаблицаРезультатов.Количество() - 1].ДатаСобытия;
		Выполнить СтрШаблон("%1(НастройкаТеста,ТаблицаРезультатов,ДопТаблицы)", ДопТаблицы.Метод);
			
	КонецЕсли;

	Если Не ДопТаблицы.ЭтапОбработки.Завершен И ДопТаблицы.Отборы.ПараметрыТеста.ИнтервалОбработкиДанных > 0 Тогда
		ДопТаблицы.ЭтапОбработки.ТекущаяДатаСобытия = ДопТаблицы.ЭтапОбработки.ТекущаяДатаСобытия + ДопТаблицы.Отборы.ПараметрыТеста.ИнтервалОбработкиДанных * 60;
	КонецЕсли;
	
	СообщитьДлительностьОперации(
		НастройкаТеста,
		СтрШаблон("%1 %2 итерации данных", ДопТаблицы.ПредставлениеЭтапа, ДопТаблицы.ЭтапОбработки.НомерИтерации), 
		ДопТаблицы.ДатаНачала, 
		ДопТаблицы.ЭтапОбработки); 
		
КонецПроцедуры

Процедура РезультатОжиданияВыполненияПотоков(НастройкаТеста, Результат, ДопТаблицы) Экспорт 
	
	// проверим результат выполнения фоновых заданий
	ЕстьАварийныеФон = Ложь;
	ЕстьАктивныеФон = Истина;
	КоличествоПотоковПрошлое = 100;
	КоличествоПотоков = 0;
	МассивЗаданий = ДопТаблицы.МассивЗаданий;
	Пока Истина Цикл
		
		КоличествоПотоков = 0;
		Для Каждого Задание ИЗ МассивЗаданий Цикл
			
			Если Задание.Состояние=СостояниеФоновогоЗадания.Активно Тогда
				КоличествоПотоков = КоличествоПотоков + 1;
			ИначеЕсли Задание.Состояние=СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				ЕстьАварийныеФон = Истина;
				НастройкаТестовСервер.СообщитьОшибку(НастройкаТеста, ДопТаблицы.ПодразделЖР, Задание.ИнформацияОбОшибке, Результат, МассивЗаданий);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;      
		
		Если ЕстьАварийныеФон Тогда
			Прервать;		
		КонецЕсли;
		
		Если КоличествоПотоков > 0 Тогда
			
			МассивЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий);
			Если КоличествоПотоков <> КоличествоПотоковПрошлое Тогда
				НастройкаТестовСервер.СообщитьПрогрессаЭтапа(
					СтрШаблон("Выполнение в %1 из %2", 
						СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
							НСтр("ru='; %1 поток;; %1 потока; %1 потоков; %1 потока';"),
							КоличествоПотоков
							), 
						МассивЗаданий.Количество()
					),
					ДопТаблицы.ЗаголовокСообщения
				);
				КоличествоПотоковПрошлое = КоличествоПотоков;
				
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаРезультатовПоЗапросу(Запрос, НастройкаТеста, ДопТаблицы)
	
	Запрос.УстановитьПараметр("НастройкаТеста", НастройкаТеста); 
	
	Если ЗначениеЗаполнено(ДопТаблицы.Отборы.ИсключитьВидОшибок) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ВидыОшибок%", "И НЕ ВидОшибки В (&ИсключитьВидОшибок)");
		Запрос.УстановитьПараметр("ИсключитьВидОшибок", ДопТаблицы.Отборы.ИсключитьВидОшибок); 
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопТаблицы.Отборы.ИсключитьВидыСобытий) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ИсключитьВидыСобытий%", "И НЕ ВидСобытия В (&ИсключитьВидыСобытий)");
		Запрос.УстановитьПараметр("ИсключитьВидыСобытий", ДопТаблицы.Отборы.ИсключитьВидыСобытий); 
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопТаблицы.Отборы.ТолькоВидыСобытий) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ТолькоВидыСобытий%", "И ВидСобытия В (&ТолькоВидыСобытий)");
		Запрос.УстановитьПараметр("ТолькоВидыСобытий", ДопТаблицы.Отборы.ТолькоВидыСобытий); 
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопТаблицы.Отборы.ОтборПоСессиям) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборПоСессиям%", "И НомерСессии В (&ОтборПоСессиям)");
		Запрос.УстановитьПараметр("ОтборПоСессиям", ДопТаблицы.Отборы.ОтборПоСессиям); 
			
	КонецЕсли;
	
	Если ДопТаблицы.ЭтапОбработки <> Неопределено Тогда
		
		Если ДопТаблицы.Отборы.ПараметрыТеста.ИнтервалОбработкиДанных > 0 Тогда 
    		
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДатаСобытия%", "И ДатаСобытия > &ДатаНач И ДатаСобытия <= &ДатаКон");
			Запрос.УстановитьПараметр("ДатаНач", ДопТаблицы.ЭтапОбработки.ТекущаяДатаСобытия);
			Запрос.УстановитьПараметр("ДатаКон", ДопТаблицы.ЭтапОбработки.ТекущаяДатаСобытия + ДопТаблицы.Отборы.ПараметрыТеста.ИнтервалОбработкиДанных * 60);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция НомерТекущийИтерации(НастройкиИтераций, ТекущаяДатаСобытия) Экспорт 
	
	Если НастройкиИтераций.ИнтервалОбработкиДанных > 0 И ТекущаяДатаСобытия - НастройкиИтераций.ДатаМинимум > 0 Тогда 
		Итераций = (ТекущаяДатаСобытия - НастройкиИтераций.ДатаМинимум) / НастройкиИтераций.ИнтервалОбработкиДанных / 60; 
		Итераций = Окр(Итераций, 0);
	Иначе
		Итераций = 0;
	КонецЕсли;
	
	Итераций = Итераций + 1;
	Возврат Итераций;

КонецФункции

// Установка в переданной строке текста ошибки
Процедура УстановитьТекстОшибки(СтрокаТаблицы, ТекстОшибки, ПроверятьНаличие = Ложь) Экспорт 
	
	Если ПроверятьНаличие И СтрНайти(СтрокаТаблицы.ТекстОшибки, ТекстОшибки) > 0 Тогда
		Возврат;		
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаТаблицы.ТекстОшибки) Тогда
		СтрокаТаблицы.ТекстОшибки = ТекстОшибки;
	Иначе
		СтрокаТаблицы.ТекстОшибки = СтрШаблон("%1%2%2%3", СтрокаТаблицы.ТекстОшибки, символы.ПС, ТекстОшибки);		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьПроизвольнуюИнформацию(СтрокаТаблицы, Текст, ПроверятьНаличие = Ложь) Экспорт 
	
	Если ПроверятьНаличие И СтрНайти(СтрокаТаблицы.ПроизвольнаяИнформация, Текст) > 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ПроизвольнаяИнформация) Тогда
		СтрокаТаблицы.ПроизвольнаяИнформация = СтрШаблон("%1;;; ", СтрокаТаблицы.ПроизвольнаяИнформация);	
	КонецЕсли;                              
	
	СтрокаТаблицы.ПроизвольнаяИнформация = СтрШаблон("%1%2", СтрокаТаблицы.ПроизвольнаяИнформация, Текст);	
	
КонецПроцедуры

// Выполняет расчет даты минимума, максимума и количества итераций для обхода частями всего регистра.
Функция РасчетИтераций(НастройкаТеста, ДопТаблицы) Экспорт 
	
	Запрос = Новый запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ДатаСобытия) КАК ДатаМинимум,   
	|	МАКСИМУМ(ДатаСобытия) КАК ДатаМаксимум   
	|ИЗ
	|	РегистрСведений.РезультатыВыполненияЗапросов КАК РезультатыВыполненияЗапросов
	|ГДЕ
	|	НастройкаТеста = &НастройкаТеста
	|	//%ВидыОшибок%
	|	//%ИсключитьВидыСобытий%
	|	//%ТолькоВидыСобытий%
	|";
	Запрос.УстановитьПараметр("НастройкаТеста", НастройкаТеста);
	
	Если ЗначениеЗаполнено(ДопТаблицы.Отборы.ИсключитьВидОшибок) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ВидыОшибок%", "И НЕ ВидОшибки В (&ИсключитьВидОшибок)");
		Запрос.УстановитьПараметр("ИсключитьВидОшибок", ДопТаблицы.Отборы.ИсключитьВидОшибок); 
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопТаблицы.Отборы.ИсключитьВидыСобытий) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ИсключитьВидыСобытий%", "И НЕ ВидСобытия В (&ИсключитьВидыСобытий)");
		Запрос.УстановитьПараметр("ИсключитьВидыСобытий", ДопТаблицы.Отборы.ИсключитьВидыСобытий); 
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопТаблицы.Отборы.ТолькоВидыСобытий) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ТолькоВидыСобытий%", "И ВидСобытия В (&ТолькоВидыСобытий)");
		Запрос.УстановитьПараметр("ТолькоВидыСобытий", ДопТаблицы.Отборы.ТолькоВидыСобытий); 
			
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ДатаМинимум = Выборка.ДатаМинимум;
	ДатаМаксимум = Выборка.ДатаМаксимум;
	
	Если ДопТаблицы.Отборы.ПараметрыТеста.ИнтервалОбработкиДанных > 0 И ДатаМаксимум - ДатаМинимум > 0 Тогда 
		Итераций = (ДатаМаксимум - ДатаМинимум) / ДопТаблицы.Отборы.ПараметрыТеста.ИнтервалОбработкиДанных / 60;
		Если Цел(Итераций) = 0 Тогда
			Итераций = 1;
		Иначе	
			Итераций = Цел(Итераций) + ?(Итераций / Цел(Итераций) > 1, 1, 0);
		КонецЕсли;
	Иначе
		Итераций = 1;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаМинимум", ДатаМинимум);
	Результат.Вставить("ДатаМаксимум", ДатаМаксимум);
	Результат.Вставить("Итераций", Итераций);
	Результат.Вставить("ИнтервалОбработкиДанных", ДопТаблицы.Отборы.ПараметрыТеста.ИнтервалОбработкиДанных); 
	ДопТаблицы.Вставить("НастройкиИтераций", Результат);

	Возврат Результат
	
КонецФункции

// Записывает отладочную информацию в РС ПроизвольныйНепериодический
Процедура ЗаписьОтладки(Измерение1 = Неопределено, Измерение2 = Неопределено, Ресурс1 = Неопределено, Ресурс2 = Неопределено, Ресурс3 = Неопределено, Ресурс4 = Неопределено) Экспорт 

	Если ИТМ_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ЗаписьОтладки", Ложь) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ПроизвольныйНепериодический.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Измерение1 = Измерение1;
		МенеджерЗаписи.Измерение2 = Измерение2;
		МенеджерЗаписи.Ресурс1 = Ресурс1;
		МенеджерЗаписи.Ресурс2 = Ресурс2;
		МенеджерЗаписи.Ресурс3 = Ресурс3;
		МенеджерЗаписи.Ресурс4 = Ресурс4;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаРегистраСведений(ИмяРегистра, Колонки = Неопределено) Экспорт 
	
	Если Колонки = Неопределено Тогда
		Результат = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Иначе		
		Результат = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки(Колонки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// 0 - неизмененная, 1 - новая, 2 - измененная, 3 - удалить
Процедура ДобавитьКолонкиИзмененияВТаблицу(Таблица, ВидИзменения = 0) Экспорт 
	
	Таблица.Колонки.Добавить("ВидИзменения", ОбщегоНазначения.ОписаниеТипаЧисло(1,0,ДопустимыйЗнак.Неотрицательный));
		
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖР(НастройкаТеста, ТекстОшибки, ПодразделЖР, ДопТаблицы) Экспорт 
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ИмяСобытия = НСтр(СтрШаблон("ru = 'НастройкаТестов.%1'", ПодразделЖР),
		КодОсновногоЯзыка);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка, ,НастройкаТеста ,
		ТекстОшибки);

КонецПроцедуры

Процедура СообщитьОшибку(НастройкаТеста, ПодразделЖР, ИнформацияОбОшибке, Результат, МассивЗаданий = Неопределено) Экспорт 
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ИмяСобытия = НСтр(СтрШаблон("ru = 'НастройкаТестов.%1'", ПодразделЖР),
		КодОсновногоЯзыка);
		
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Структура") Тогда
		КраткоеПредставлениеОшибки = ИнформацияОбОшибке.КраткоеПредставлениеОшибки;
		ПодробноеПредставлениеОшибки = ИнформацияОбОшибке.ПодробноеПредставлениеОшибки;
	Иначе
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка, ,НастройкаТеста ,
		ПодробноеПредставлениеОшибки);
	Результат.ОшибкаВыполнения = Истина;
	Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки;
	
	Если МассивЗаданий <> Неопределено Тогда
		МассивЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий);
		Для каждого Задание Из МассивЗаданий Цикл
			Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				Задание.Отменить();
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Функция ИмяПодготовленногоОператора(НоваяЗапись) Экспорт  
	
	Если 	НоваяЗапись.ВидСобытия = Перечисления.ВидыСобытийЗапросов.ОпределениеПодготовленногоОператора
			Или НоваяЗапись.ВидСобытия = Перечисления.ВидыСобытийЗапросов.ОпределениеПодготовленногоОператораВТ Тогда
		ПодстрокаПоиска = "\bset\s+@p\d+=(\d+)\b";
	ИначеЕсли НоваяЗапись.ВидСобытия = Перечисления.ВидыСобытийЗапросов.ВызовПодготовленногоОператора 
			Или НоваяЗапись.ВидСобытия = Перечисления.ВидыСобытийЗапросов.ВызовПодготовленногоОператораВТ Тогда
		ПодстрокаПоиска = "\bexec sp_execute (\d+)";
	ИначеЕсли НоваяЗапись.ВидСобытия = Перечисления.ВидыСобытийЗапросов.РазрушениеПодготовленногоОператора 
			Или НоваяЗапись.ВидСобытия = Перечисления.ВидыСобытийЗапросов.РазрушениеПодготовленногоОператораВТ Тогда
		ПодстрокаПоиска = "\bexec sp_unprepare (\d+)";
	КонецЕсли;

	НомерОператора = СтрНайтиПоРегулярномуВыражению(НоваяЗапись.ТекстЗапросаMSSQL, ПодстрокаПоиска).ПолучитьГруппы()[0].Значение;
	ИмяОператора = СтрШаблон("po%1", НомерОператора); 
	
	Возврат ИмяОператора
		
КонецФункции


#КонецОбласти