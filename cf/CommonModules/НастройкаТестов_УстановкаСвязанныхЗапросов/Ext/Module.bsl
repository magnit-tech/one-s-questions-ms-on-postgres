#Область ПрограммныйИнтерфейс

Процедура УстановкаСвязанныхЗапросовФон(Параметры, АдресХранилища) Экспорт 

	Результат = УстановкаСвязанныхЗапросов(Параметры.НастройкаТеста, Параметры.ОчиститьЭтап, Параметры.ПараметрыТеста);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция УстановкаСвязанныхЗапросов(НастройкаТеста, ОчиститьЭтап, ПараметрыТеста = Неопределено) Экспорт 

	ДатаНачалаОбщая = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Результат = НастройкаТестовСервер.РезультатВыполненияФоновогоЗаданияЭтапа();
	Если ПараметрыТеста = Неопределено Тогда
		ПараметрыТеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаТеста, "ИнтервалОбработкиДанных");
	КонецЕсли;
	
	Попытка
		
		Если Не ОчиститьЭтап Тогда
			ЭтапОбработки = НастройкаТестовСервер.ЭтапОбработки(НастройкаТеста, Перечисления.ВидыЭтаповОбработки.УстановкаСвязанныхЗапросов);
			ОчиститьЭтап = ЭтапОбработки.НомерИтерации = 0;
		КонецЕсли;
		
		Если ОчиститьЭтап Тогда 
			
			НастройкаТестовСервер.ОчиститьЭтапОбработки(НастройкаТеста, Перечисления.ВидыЭтаповОбработки.УстановкаСвязанныхЗапросов);
			НастройкаТестовСервер.ОчиститьЭтапОбработки(НастройкаТеста, Перечисления.ВидыЭтаповОбработки.СозданиеТекстовЗапросов);
			НастройкаТестовСервер.ОчиститьЭтапОбработки(НастройкаТеста, Перечисления.ВидыЭтаповОбработки.ВыполнениеЗапросов);
			
		КонецЕсли;
		
		Многопоточность = НастройкаТестовСервер.Многопоточность();
		
		// Подготовим вспомогательные таблицы
		ДопТаблицы = Новый Структура;
		ДопТаблицы.Вставить("Многопоточность", 			Многопоточность);
		ДопТаблицы.Вставить("ОшибкиПреобразования", 	НастройкаТестов_СозданиеЗапросов.ОшибкиПреобразования()); 
		
		// Если рассчет не многопотоковый, то можно получить сразу все вспомогательные таблицы, которые зависят от сессий и наполняются при рассчетах
		Если Не Многопоточность Тогда
			ДополнитьДопТаблицы(НастройкаТеста, ДопТаблицы);
		КонецЕсли;
		
		ИсключитьВидОшибок = Новый Массив;
		ИсключитьВидОшибок.Добавить(Перечисления.ВидыОшибокЗапросов.ОшибкаMSSQL);
		ИсключитьВидОшибок.Добавить(Перечисления.ВидыОшибокЗапросов.ПропущенныйЗапросMsSQL);
		ИсключитьВидОшибок.Добавить(Перечисления.ВидыОшибокЗапросов.ПропускатьПриПреобразовании);
		
		// Для выборки данных проверку будем вызывать на этапе создания запросов
		ТолькоВидыСобытий = Новый Массив;
		ТолькоВидыСобытий.Добавить(Перечисления.ВидыСобытийЗапросов.ЗаполнениеВременнойТаблицы);
		ТолькоВидыСобытий.Добавить(Перечисления.ВидыСобытийЗапросов.ОчисткаВременнойТаблицы);
		ТолькоВидыСобытий.Добавить(Перечисления.ВидыСобытийЗапросов.СозданиеИндексаВременнойТаблицы);
		//ТолькоВидыСобытий.Добавить(Перечисления.ВидыСобытийЗапросов.ОпределениеПодготовленногоОператораВТ);
		
		// Отдельная структура под отборы для получения данных из РС Результаты...
		Отборы = НастройкаТестовСервер.ОтборыТаблицыРезультатов();
		Отборы.ПараметрыТеста 		= ПараметрыТеста;
		Отборы.ИсключитьВидОшибок 	= ИсключитьВидОшибок;
		Отборы.ТолькоВидыСобытий	= ТолькоВидыСобытий;
		ДопТаблицы.Вставить("Отборы", Отборы);
		
		НастройкаТестовСервер.РасчетИтераций(НастройкаТеста, ДопТаблицы);
		
		Пока Истина Цикл
			
			ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ДопТаблицы.Вставить("ДатаНачала", ДатаНачала);
			ЭтапОбработки = НастройкаТестовСервер.ЭтапОбработки(НастройкаТеста, Перечисления.ВидыЭтаповОбработки.УстановкаСвязанныхЗапросов, ДопТаблицы.НастройкиИтераций);
			ДопТаблицы.Вставить("ЭтапОбработки", ЭтапОбработки);

			Если ПараметрыТеста.ИнтервалОбработкиДанных = 0 Тогда 
				ЗаголовокСообщения = "Установка связанных запросов";
				ТекстСообещения = "Всех записей...";
			Иначе
				ЗаголовокСообщения = СтрШаблон("Установка связанных запросов. Итерация %1 из %2", ЭтапОбработки.НомерИтерации, ДопТаблицы.НастройкиИтераций.Итераций);
				ТекстСообещения = СтрШаблон("Обработка записей за %1 мин. с %2", ПараметрыТеста.ИнтервалОбработкиДанных, Формат(ЭтапОбработки.ТекущаяДатаСобытия, "ДЛФ=DT"));
			КонецЕсли;
			
			ДопТаблицы.Вставить("ЗаголовокСообщения", 	ЗаголовокСообщения);
			ДопТаблицы.Вставить("ТекстСообещения", 		ТекстСообещения);
			ДопТаблицы.Вставить("Метод", 				"НастройкаТестов_УстановкаСвязанныхЗапросов.ВыполнитьОдинПоток");
			ДопТаблицы.Вставить("ПредставлениеЭтапа", 	"Установка связанных запросов");
			ДопТаблицы.Вставить("ПодразделЖР", 			"УстановкаСвязанныхЗапросов"); 
			
			// Подготовка к многопоточности
			Если Многопоточность Тогда
				МассивЗаданий = НастройкаТестовСервер.СоздатьЗапуститьПотоки(НастройкаТеста, Результат, ДопТаблицы);
				Если Результат.ОшибкаВыполнения Тогда
					Прервать;	
				КонецЕсли;
				ДопТаблицы.Вставить("МассивЗаданий", МассивЗаданий);
			КонецЕсли;  
			
			НастройкаТестовСервер.ВыполнитьИтерациюЭтапа(НастройкаТеста, ДопТаблицы, Результат);
			
			Если Результат.ОшибкаВыполнения Или ДопТаблицы.ЭтапОбработки.Завершен Тогда
				Прервать;	
			КонецЕсли;
			
		КонецЦикла;	
		
		Если Не Результат.ОшибкаВыполнения Тогда
			НастройкаТестовСервер.СообщитьДлительностьОперации(НастройкаТеста,ДопТаблицы.ПредставлениеЭтапа, ДатаНачалаОбщая);
			  //НастройкаТестов_СозданиеЗапросов.СообщитьОбОшибкахОтладки(НастройкаТеста, "ОтладкаСозданияВТ"); 
			Результат.Вставить("ЭтапЗавершен", Истина);
		КонецЕсли;
			
	Исключение
		
		НастройкаТестовСервер.СообщитьОшибку(НастройкаТеста, "УстановкаСвязанныхЗапросов", ИнформацияОбОшибке(), Результат, МассивЗаданий);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции 

Функция ПроверитьСвязьСОшибкамиВТ(СтрокаТаблицы, РегШаблон = "\bpg_temp\.(tt\d+)\b", ДопТаблицы) Экспорт 
	
	Результаты = СтрНайтиВсеПоРегулярномуВыражению(СтрокаТаблицы.ТекстЗапросаPostgres, РегШаблон);
	Изменили = Ложь;
	ПройденныеВТ = Новый Массив;
	Для каждого Результат Из Результаты Цикл
		
		ИмяТаблицы = Результат.ПолучитьГруппы()[0].Значение;
		Если ПройденныеВТ.Найти(ИмяТаблицы) <> Неопределено Тогда
			Продолжить;	
		КонецЕсли;     
		ПройденныеВТ.Добавить(ИмяТаблицы);
		Строки = НастройкаТестов_СозданиеВременныхТаблиц.СтрокиВременныеТаблицыPostgres(ДопТаблицы.ВременныеТаблицыPostgres,СтрокаТаблицы.НомерСессии,ИмяТаблицы);
		
		// Возможна ситуация, что ВТ была создана и заполнена до начала, а ее использование только в текущем запросе
		Если Строки.Количество() = 0 Тогда
			
			НастройкаТестов_СозданиеЗапросов.УстановитьОшибкуПреобразования(ДопТаблицы.ОшибкиПреобразования, СтрокаТаблицы, "СвязанныйЗапрос",,ДопТаблицы.Многопоточность);
			Изменили = Истина;
			Прервать;
			
		Иначе	
			
			ТекСтрока = Неопределено; // Возможна ситуация, что ВТ была создана до начала снятия логов и ее заполнение тоже было выполнено до снятия логов, а ее использование стало позже (первый ее инсерт, когда мы ее у себя создаем - позже), текущий запрос помечаем ошибочным
			Для каждого Строка Из Строки Цикл
				Если Строка.ДатаСоздания > СтрокаТаблицы.ДатаСобытия Тогда
					Прервать;	
				КонецЕсли;	
				ТекСтрока = Строка;
			КонецЦикла;
			
			Если ТекСтрока = Неопределено Или ТекСтрока.ОшибкаСоздания Тогда
				НастройкаТестов_СозданиеЗапросов.УстановитьОшибкуПреобразования(ДопТаблицы.ОшибкиПреобразования, СтрокаТаблицы, "СвязанныйЗапрос",,ДопТаблицы.Многопоточность);
				Изменили = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Изменили;
	
КонецФункции

Процедура ДополнитьДопТаблицы(НастройкаТеста, ДопТаблицы, НомераСессий = Неопределено)
	
	Если ЗначениеЗаполнено(НомераСессий) Тогда
		Отборы = "НомерСессии В (&НомераСессий)";
		Параметры = Новый Структура("НомераСессий", НомераСессий);
	Иначе
		Отборы = ""; 
		Параметры = Неопределено; 
	КонецЕсли;
	ДопТаблицы.Вставить("ВременныеТаблицыPostgres", НастройкаТестов_СозданиеВременныхТаблиц.ВременныеТаблицыPostgres(НастройкаТеста, , Отборы, Параметры));
	ДопТаблицы.ВременныеТаблицыPostgres.Индексы.Добавить("НомерСессии,ИмяТаблицы");
		
КонецПроцедуры

Процедура ВыполнитьОдинПоток(НастройкаТеста, ТаблицаРезультатов = Неопределено, ДопТаблицы) Экспорт	
	
	Если ТаблицаРезультатов = Неопределено Тогда
		ТаблицаРезультатов = НастройкаТестовСервер.ТаблицаРезультатов(НастройкаТеста, ДопТаблицы);
	КонецЕсли;

	ТаблицаРезультатов.ЗаполнитьЗначения(0, "КоличествоСтрокPostgres"); 
	ТаблицаРезультатов.ЗаполнитьЗначения(0, "ДлительностьВыполненияPostgres"); 
    ТаблицаРезультатов.Колонки.Добавить("Изменили", Новый ОписаниеТипов("Булево"));
	
	Если ДопТаблицы.Многопоточность Тогда
		ДополнитьДопТаблицы(НастройкаТеста, ДопТаблицы, ДопТаблицы.Отборы.ОтборПоСессиям);
	КонецЕсли;
			
	Шагов = 10;
	Шаг = Цел(ТаблицаРезультатов.Количество() / Шагов) - 1;
	Сч = 0;

	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если НЕ ДопТаблицы.Многопоточность И Сч % Шаг = 0 Тогда
			НастройкаТестовСервер.СообщитьПрогрессаЭтапа(ДопТаблицы.ЗаголовокСообщения, ДопТаблицы.ТекстСообещения, Окр(Сч/ТаблицаРезультатов.Количество()*10, 0) * 10);
		КонецЕсли;
		Сч = Сч + 1; 
		
		// Запоминаем ошибку ПропускатьПриВыполнении
		ПропускатьПриВыполнении = СтрокаТаблицы.ВидОшибки = Перечисления.ВидыОшибокЗапросов.ПропускатьПриВыполнении;
		СтрокаТаблицы.ВидОшибки = Перечисления.ВидыОшибокЗапросов.ПустаяСсылка();
		
		//Если Не ПроверитьСвязьСОшибкамиВТ(СтрокаТаблицы, ВременныеТаблицыPostgres, ОшибкиПреобразования, "(?<!\binsert into )\bpg_temp\.(tt\d+)\b") Тогда 
		// Нужны все имена, ведь это может быть инсерт в другом событии
		ТекОшибка = СтрокаТаблицы.ОшибкаПреобразования;
		Если НЕ ПроверитьСвязьСОшибкамиВТ(СтрокаТаблицы, "\bpg_temp\.(tt\d+)\b", ДопТаблицы) И ЗначениеЗаполнено(СтрокаТаблицы.ОшибкаПреобразования) Тогда
			НастройкаТестов_СозданиеЗапросов.УстановитьОшибкуПреобразования(ДопТаблицы.ОшибкиПреобразования, СтрокаТаблицы, ,"СвязанныйЗапрос",ДопТаблицы.Многопоточность);	
		КонецЕсли;
		
		Если ТекОшибка <> СтрокаТаблицы.ОшибкаПреобразования Тогда
			СтрокаТаблицы.Изменили = Истина;
		КонецЕсли;
		
		// Возвращаем на место ошибку ПропускатьПриВыполнении
		Если ПропускатьПриВыполнении Тогда
			СтрокаТаблицы.ВидОшибки = Перечисления.ВидыОшибокЗапросов.ПропускатьПриВыполнении;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохранение изменненных таблиц в соответсвующие регистры
	
	ТаблицаРезультатовВТ = ТаблицаРезультатов.Скопировать(Новый Структура("Изменили", Истина));
	
	НачатьТранзакцию();
	НастройкаТестовСервер.ЗагрузитьДанныеВРегистр(НастройкаТеста, ТаблицаРезультатовВТ);
	ЗафиксироватьТранзакцию();
	
	ТаблицаРезультатов = Неопределено; 
	ТаблицаРезультатовВТ = Неопределено; 
		
КонецПроцедуры 

#КонецОбласти